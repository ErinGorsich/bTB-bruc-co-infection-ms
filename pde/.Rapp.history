##############################################################
##############################################################
# Functions to calculate EE and Ro#
source('~/GitHub/bTB-bruc-co-infection-ms/pde/Ro_calculations.R', chdir = TRUE)#
#
# Functions for plotting#
source('~/GitHub/bTB-bruc-co-infection-ms/pde/plotting_functions.R', chdir = TRUE)
source('~/GitHub/bTB-bruc-co-infection-ms/pde/get_EE.R', chdir = TRUE)
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))
binsize <- N/agemax #number of delta age bins to get one age bin...
x_singleTB <- x0#
	x_singleTB[(N+1)  +  3*binsize] <- 1#
	x_singleTB[(N+1) +  4*binsize] <- 1
x_singleTB
sol <- as.data.frame(ode(x_singleTB, times, rhs, #
			params, method = "ode45"))}#
	S <-sum(sol[length(sol[,1]) , s.index+1])#
	It <- sum(sol[length(sol[,1]) , it.index +1])#
	Ic <- sum(sol[length(sol[,1]) , ic.index +1])#
	Ib <- sum(sol[length(sol[,1]) , ib.index +1])#
	Ic <- sum(sol[length(sol[,1]) , ic.index +1])#
	R <- sum(sol[length(sol[,1]) , r.index +1])#
	Rc <-sum(sol[length(sol[,1]) , rc.index +1])#
	Tot <- sum(sol[length(sol[,1]), 2:length(colnames(sol))])	#
	EE_bTB_alone <- (It + Ic + Rc) / Tot
method = "beverton-holt"
if (method == "beverton-holt"){#
		sol <- as.data.frame(ode(x_singleTB, times, rhs, #
			params, method = "ode45"))}#
	S <-sum(sol[length(sol[,1]) , s.index+1])#
	It <- sum(sol[length(sol[,1]) , it.index +1])#
	Ic <- sum(sol[length(sol[,1]) , ic.index +1])#
	Ib <- sum(sol[length(sol[,1]) , ib.index +1])#
	Ic <- sum(sol[length(sol[,1]) , ic.index +1])#
	R <- sum(sol[length(sol[,1]) , r.index +1])#
	Rc <-sum(sol[length(sol[,1]) , rc.index +1])#
	Tot <- sum(sol[length(sol[,1]), 2:length(colnames(sol))])	#
	EE_bTB_alone <- (It + Ic + Rc) / Tot
EE_bTB_alone
x_singleBruc <- x0#
	x_singleBruc[min(ib.index) + 1 + 3*binsize] <- 1#
	x_singleBruc[min(ib.index) + 1 + 4*binsize] <- 1
x_singleBruc
if (method == "ricker"){#
		sol <- as.data.frame(ode(x_singleBruc, times, rhs_ricker, #
			params, method = "ode45"))}#
	if (method == "logistic"){#
		sol <- as.data.frame(ode(x_singleBruc, times, rhs_logistic, #
			params, method = "ode45"))}
if (method == "beverton-holt"){#
		sol <- as.data.frame(ode(x_singleBruc, times, rhs,#
			params, method = "ode45"))}	#
	S <-sum(sol[length(sol[,1]) , s.index+1])#
	It <- sum(sol[length(sol[,1]) , it.index +1])#
	Ic <- sum(sol[length(sol[,1]) , ic.index +1])#
	Ib <- sum(sol[length(sol[,1]) , ib.index +1])#
	Ic <- sum(sol[length(sol[,1]) , ic.index +1])#
	R <- sum(sol[length(sol[,1]) , r.index +1])#
	Rc <-sum(sol[length(sol[,1]) , rc.index +1])#
	Tot <- sum(sol[length(sol[,1]), 2:length(colnames(sol))])	#
	EE_bruc_alone <- (Ib + Ic + R + Rc) / Tot
plot_raw_numbers(sol)
if (method == "beverton-holt"){#
		sol <- as.data.frame(ode(x_singleBruc, times, rhs,#
			params, method = "ode45"))}	#
	S <-sum(sol[length(sol[,1]) , s.index+1])#
	It <- sum(sol[length(sol[,1]) , it.index +1])#
	Ic <- sum(sol[length(sol[,1]) , ic.index +1])#
	Ib <- sum(sol[length(sol[,1]) , ib.index +1])#
	Ic <- sum(sol[length(sol[,1]) , ic.index +1])#
	R <- sum(sol[length(sol[,1]) , r.index +1])#
	Rc <-sum(sol[length(sol[,1]) , rc.index +1])#
	Tot <- sum(sol[length(sol[,1]), 2:length(colnames(sol))])	#
	EE_bruc_alone <- (Ib + Ic + R + Rc) / Tot
EE_bruc_alone
plot_raw_numbers(sol)
x_endB <- unname(unlist(sol[length(sol[,1]), 2:length(colnames(sol))] ))
x_endB[min(it.index) + 1  +  3*binsize] <- 1#
	x_endB[min(it.index) + 1  +  4*binsize] <- 1
x_endB
if (method == "ricker"){#
		sol <- as.data.frame(ode(x_endB, times, rhs_ricker, params, method = "ode45"))}#
	if (method == "logistic"){#
		sol <- as.data.frame(ode(x_endB, times, rhs_logistic, params, method = "ode45"))}#
	if (method == "beverton-holt"){#
		sol <- as.data.frame(ode(x_endB, times, rhs, params, method = "ode45"))}	#
	S <-sum(sol[length(sol[,1]) , s.index+1])#
	It <- sum(sol[length(sol[,1]) , it.index +1])#
	Ic <- sum(sol[length(sol[,1]) , ic.index +1])#
	Ib <- sum(sol[length(sol[,1]) , ib.index +1])#
	Ic <- sum(sol[length(sol[,1]) , ic.index +1])#
	R <- sum(sol[length(sol[,1]) , r.index +1])#
	Rc <-sum(sol[length(sol[,1]) , rc.index +1])#
	Tot <- sum(sol[length(sol[,1]), 2:length(colnames(sol))])	#
#
	EE_bTB_co <- (It + Ic + Rc) / Tot#
	EE_bruc_co <- (Ib + Ic + R + Rc) / Tot
EE_bTB_co
EE_bruc_co
source('~/GitHub/bTB-bruc-co-infection-ms/pde/get_EE.R', chdir = TRUE)
get_EE(params, xB, "beverton-holt")
x0
source('~/GitHub/bTB-bruc-co-infection-ms/pde/get_EE.R', chdir = TRUE)
get_EE(params, x0, "beverton-holt")
test <- get_EE(params, x0, "beverton-holt")
test
test[1]
params$betaT
Fmat = params$betaT* matrix(rep(S, each = 20), nrow = 20, byrow = T)
Fmat
S <- x0[s.index + 1]
S
length(S)
Fmat = params$betaT* matrix(rep(S, each = N), nrow = 20, byrow = T)
Fmat
params$betaT
matrix(rep(S, each = N), nrow = N, byrow = T)
params$aging[1:10, 1:10]
da
rhs
ls()
gen_fixed_params
params$aging[1,1]
x0
####################################
	S <- x0[s.index + 1]#
	ageflux <- params$aging[1,1]#
#
	# Calculate next generation matrix#
	Fmat = params$betaT* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Vmat = diag(x = params$muT + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
#
	Vmat2 <- diag(x = params$muT)#
	V2inv <- solve(Vmat2)#
	vals2 <- eigen(Fmat %*% V2inv)$values#
	return(max(Re(vals2)))
vals2
max(Re(vals2))
params$betaB
S
ages
Fmat <- params$betaB* matrix(rep(S, each = N), nrow = N, byrow = T)
nrow(Fmat)
ncol(Fmat)
which(ages > 2 & ages <5)
ages[2]
which(ages => 2 & ages <5)
which(ages >=2 & ages <5)
ages[40]
which(ages >=2 & ages =<5)
which(ages >=2 & ages <= 5)
Fmat <- params$betaB* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[#
		which(ages >= 2 & ages <=5), ]
Fmat
Fmat[which(ages >= 2 & ages <= 5)]
Fmat[which(ages >= 2 & ages <= 5), ]
Fmat[1:5, 1:5]
which(ages >= 2 & ages <=5)
length(ages)
ages
Ro_brucellosis_single = function(params, x0){#
	####################################
	# Input: paramter file#
	####################################
	# Get stable age distribution in dz free conditions#
	S <- x0[s.index + 1]#
	ageflux <- params$aging[1,1]#
#
	Fmat <- params$betaB* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]#
	Vmat = diag(x = params$muB + params$gamma + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals)))#
}
Ro_brucellosis_single(params, x0)
params$betaB
aging
params$aging[1,1]
S <- x0[s.index + 1]
x0
head(x0)
Fmat <- params$betaB* matrix(rep(S, each = N), nrow = N, byrow = T)
Fmat[1:10, 1:10]
Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]
Fmat[1:10, 1:10]
Fmat[10:30, 1:10]
Fmat <- params$betaB* matrix(rep(S, each = N), nrow = N, byrow = T)
Fmat[10:30, 1:10]
ages
Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]
ages
Fmat[10:30, 1:10]
Vmat = diag(x = params$muB + params$gamma + ageflux)
ncols(Vmat)
dims(Vmat)
Vmat
Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values
max(Re(vals))
params$muB
params$muS
params$betaB
ageflux
Ro_bTB_single = function(params, x0){#
	####################################
	# Input: x0 = c(S = final, 1*N S vector at params)#
	# Output: Ro#
	####################################
	S <- x0[s.index + 1]#
	ageflux <- params$aging[1,1]#
#
	# Calculate next generation matrix#
	Fmat = params$betaT* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Vmat = diag(x = params$muT + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
#
	Vmat2 <- diag(x = params$muT)#
	V2inv <- solve(Vmat2)#
	vals2 <- eigen(Fmat %*% V2inv)$values#
	return(max(Re(vals2)))#
	#return(list(Ro =vals, Ro2 =vals2, Vmat = Vmat, Vmat2 = Vmat2, #
	#	check = Vmat%*%Vinv, check2 = Vmat2 %*% V2inv, N = sum(S)))#
}#
#
################################################
# Ro of brucellosis in the absence of bTB, age structure#
################################################
#
Ro_brucellosis_single = function(params, x0){#
	####################################
	# Input: paramter file#
	####################################
	# Get stable age distribution in dz free conditions#
	S <- x0[s.index + 1]#
	ageflux <- params$aging[1,1]#
#
	Fmat <- params$betaB* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]#
	Vmat <- diag(x = params$muB + params$gamma + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals)))#
}
Ro_TB_single
Ro_bTB_single(params, x0)
Ro_brucellosis_single(params, x0)
params
Ro_brucellosis_single = function(params, x0){#
	####################################
	# Input: paramter file#
	####################################
	# Get stable age distribution in dz free conditions#
	S <- x0[s.index + 1]#
	ageflux <- params$aging[1,1]#
#
	Fmat <- params$betaB* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]#
	Vmat <- diag(x = params$muB + params$gamma - ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <-  ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals)))#
}
Ro_brucellosis_single(params, x0)
x0
head(S)
S <- x0[s.index]
ageflux <- params$aging[1,1]#
#
	Fmat <- params$betaB* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]#
	Vmat <- diag(x = params$muB + params$gamma + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals)))#
}
Ro_brucellosis_single = function(params, x0){#
	####################################
	# Input: paramter file#
	####################################
	# Get stable age distribution in dz free conditions#
	S <- x0[s.index]#
	ageflux <- params$aging[1,1]#
#
	Fmat <- params$betaB* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]#
	Vmat <- diag(x = params$muB + params$gamma + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals)))#
}
Ro_brucellosis_single(params, x0)
Ro_bTB_single = function(params, x0){#
	####################################
	# Input: x0 = c(S = final, 1*N S vector at params)#
	# Output: Ro#
	####################################
	S <- x0[s.index]#
	ageflux <- params$aging[1,1]#
#
	# Calculate next generation matrix#
	Fmat = params$betaT* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Vmat = diag(x = params$muT + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
#
	Vmat2 <- diag(x = params$muT)#
	V2inv <- solve(Vmat2)#
	vals2 <- eigen(Fmat %*% V2inv)$values#
	return(max(Re(vals2)))#
	#return(list(Ro =vals, Ro2 =vals2, Vmat = Vmat, Vmat2 = Vmat2, #
	#	check = Vmat%*%Vinv, check2 = Vmat2 %*% V2inv, N = sum(S)))#
}
Ro_bTB_single(params, x0)
Ro_brucellosis_single = function(params, x0){#
	####################################
	# Input: paramter file#
	####################################
	# Get stable age distribution in dz free conditions#
	S <- x0[s.index]#
	ageflux <- params$aging[1,1]#
#
	Fmat <- params$betaB* matrix(rep(S, each = N), nrow = N, byrow = T) / sum(S)#
	Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]#
	Vmat <- diag(x = params$muB + params$gamma + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals)))#
}
Ro_brucellosis_single(params, x0)
head(S)
S2 <- S/sum(S)
head(S2)
S <- x0[s.index]#
	S.fd <- S/sum(S)#
	ageflux <- params$aging[1,1]#
#
	Fmat <- params$betaB* matrix(rep(S.fd, each = N), nrow = N, byrow = T)#
	Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]#
	Vmat <- diag(x = params$muB + params$gamma + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux
Vmat[1:10, 1:10]
S <- x0[s.index]#
	ageflux <- params$aging[1,1]#
#
	# Calculate next generation matrix#
	Fmat = params$betaT* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Vmat = diag(x = params$muT + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
#
	Vmat2 <- diag(x = params$muT)#
	V2inv <- solve(Vmat2)#
	vals2 <- eigen(Fmat %*% V2inv)$values
Vmat2[1:10, 1:10]
Vmat[1:10, 1:10]
Ro_bTB_single = function(params, x0){#
	####################################
	# Input: x0 = c(S = final, 1*N S vector at params)#
	# Output: Ro#
	####################################
	S <- x0[s.index]#
	ageflux <- params$aging[1,1]#
#
	# Calculate next generation matrix#
	Fmat = params$betaT* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Vmat = diag(x = params$muT + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals)))#
	#Vmat2 <- diag(x = params$muT)#
	#V2inv <- solve(Vmat2)#
	#vals2 <- eigen(Fmat %*% V2inv)$values#
	#return(max(Re(vals2)))#
	#return(list(Ro =vals, Ro2 =vals2, Vmat = Vmat, Vmat2 = Vmat2, #
	#	check = Vmat%*%Vinv, check2 = Vmat2 %*% V2inv, N = sum(S)))#
}
Ro_bTB_single(params, x0)
Ro_bTB_single = function(params, x0){#
	####################################
	# Input: x0 = c(S = final, 1*N S vector at params)#
	# Output: Ro#
	####################################
	S <- x0[s.index]#
	ageflux <- params$aging[1,1]#
#
	# Calculate next generation matrix#
	Fmat = params$betaT* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Vmat = diag(x = params$muT + 1/ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - 1/ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals)))#
	#Vmat2 <- diag(x = params$muT)#
	#V2inv <- solve(Vmat2)#
	#vals2 <- eigen(Fmat %*% V2inv)$values#
	#return(max(Re(vals2)))#
	#return(list(Ro =vals, Ro2 =vals2, Vmat = Vmat, Vmat2 = Vmat2, #
	#	check = Vmat%*%Vinv, check2 = Vmat2 %*% V2inv, N = sum(S)))#
}
Ro_bTB_single(params, x0)
S <- x0[s.index]#
	ageflux <- params$aging[1,1]#
#
	# Calculate next generation matrix#
	Fmat = params$betaT* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Vmat = diag(x = params$muT + 1/ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - 1/ageflux#
	Vinv <- solve(Vmat)
Vmat[1:10, 1:10]
# WARNING: reads in x0, xB, and xT from global environment#
# agemax and N need to be global parameters#
# indicies as well#
#
Ro_bTB_single = function(params, x0){#
	####################################
	# Input: x0 = c(S = final, 1*N S vector at params)#
	# Output: Ro#
	####################################
	S <- x0[s.index]#
	ageflux <- params$aging[1,1]#
#
	# Calculate next generation matrix#
	Fmat = params$betaT* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Vmat = diag(x = params$muT + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	Vmat2 <- diag(x = params$muT)#
	V2inv <- solve(Vmat2)#
	vals2 <- eigen(Fmat %*% V2inv)$values#
	return(max(Re(vals2)))#
}#
#
################################################
# Ro of brucellosis in the absence of bTB, age structure#
################################################
#
Ro_brucellosis_single = function(params, x0){#
	####################################
	# Input: paramter file#
	####################################
	# Get stable age distribution in dz free conditions#
	S <- x0[s.index]#
	S.fd <- S/sum(S)#
	ageflux <- params$aging[1,1]#
#
	Fmat <- params$betaB* matrix(rep(S.fd, each = N), nrow = N, byrow = T)#
	Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]#
	Vmat <- diag(x = params$muB + params$gamma + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	Vmat2 <- diag(x = params$muB + params$gamma)#
	Vinv2 <- solve(Vmat2)#
	vals2 <- eigen(Fmat %*% Vinv2)$values#
#
	return(max(Re(vals2)))#
}
Ro_bTB_single(params, x0)
Ro_brucellosis_single(params, x0)
N
params$betaBm <- rep(params$betaB, length.out = N)
params$betaBm[which(ages >= 2 & ages <=5)] <- exp(0.885) * params$betaB
params$betaBm
params$betaT
Fmat = rbind(params$betaT * matrix(rep(S, each = 3*N), nrow = N, byrow = T),#
		params$rhoT * params$betaT * matrix(rep(Ib, each = 60), nrow = N, byrow = T),#
		params$rhoT * params$betaT * matrix(rep(R, each = 60), nrow = N, byrow = T))
S <- xB[s.index]#
	Ib <- xB[ib.index]#
	R <- xB[r.index]
binsize
# set xB#
xstart <- x0#
xstart[min(ib.index)+1 + 3*binsize] <- 1#
xstart[min(it.index)+1 + 3*binsize] <- 1#
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))#
test <- as.data.frame(ode.1D(xstart, times, rhs, params, #
	nspec = 6, dimens = N, method = "ode45"))#
xB <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))])) #
plot_raw_numbers(test)#
#
# set xT#
xstart <- x0#
xstart[min(it.index)+1 + 3*binsize] <- 1#
xstart[min(it.index)+1 + 4*binsize] <- 1#
test <- as.data.frame(ode.1D(xstart, times, rhs, params, #
	nspec = 6, dimens = N, method = "ode45"))#
xT <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))])) #
plot_raw_numbers(test)
get_prevalence(test)
aging
params$aging[1:5, 1:5]
##############################################################
##############################################################
# Erin Gorsich#
# This Code analyzes the pde co-infection model#
# model is defined in rhs; parameters in fixed_parameters#
##############################################################
##############################################################
##############################################################
#
##############################################################
##############################################################
#1) Load fixed parameters, model#
##############################################################
##############################################################
rm(list = ls())#
require("deSolve")#
library("plyr")#
library("ggplot2")#
library("lattice") # for levelplots#
library("gridExtra") # layout for lattice#
library("RColorBrewer")#
library("doParallel")#
library("foreach")#
set.seed(5)#
#
setwd("~/GitHub/bTB-bruc-co-infection-ms/pde")#
#
# parameters#
source('fixed_parameters.R', chdir = TRUE)#
#
# rhs function - model structure#
source('rhs.R', chdir = TRUE)#
# age divisions in rhs function#
agemax <- 20#
agestep <- 0.1#
N <- agemax / agestep#
ages <- seq(1, agemax + 1, by = agestep)[-(N)]#
N == length(ages)#
#
# generate parameters with correct agebins#
f.params <- gen_fixed_params(agemax, agestep, p = p, recovery = FALSE)#
f.params.recov <- gen_fixed_params(agemax, agestep, p = p, recovery = TRUE)#
#
# Functions for plotting (and define indecies based on ages, N): #
source('~/GitHub/bTB-bruc-co-infection-ms/pde/plotting_functions.R', chdir = TRUE)#
#
# Starting agestructure (Jolles 2007; Caron et al. 2001)#
juv <- rep(0.137 / length(ages[ages < 2]), length(ages[ages < 2]))#
sa <- rep(0.368 / length(ages[ages >= 2 & ages < 6]), length(ages[ages >= 2 & ages < 6]))#
a <- rep(0.185 / length(ages[ages >= 6 & ages < 9]), length(ages[ages >= 6 & ages < 9]))#
ma <- rep(0.235 / length(ages[ages >= 9 & ages < 14]), length(ages[ages >= 9 & ages < 14]))#
sen <- rep(0.075 / length(ages[ages >= 14 ]), length(ages[ages >= 14]))#
#
relage <- c(juv, sa, a, ma, sen); length(relage) == N									#
plot.relage <- c(0.137, rep(0.368/4, 4), rep(0.185/3, 3), rep(0.235/5, 5), rep(0.075/7, 7)) 	#
# Define x0, parameter for getEE function, disease free values#
##############################################################
S0 <- 400 * relage; It0 <- 0 * relage; Ib0 <- 0 * relage#
Ic0 <- 0 * relage; R0 <- 0 * relage; Rc0 <- 0 * relage#
times <- seq(1, 300, 1)#
x0 <- c(S0, It0, Ib0, Ic0, R0, Rc0)#
params <- c(f.params, list(gamma = 1/2, betaB = 0, #
	betaT = 0, rhoT = 1, rhoB = 2.1))#
test <- as.data.frame(ode.1D(x0, times, rhs, params, #
	nspec = 6, dimens = N, method = "ode45"))#
x0 <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))])) #
#
##############################################################
##############################################################
#2) Analyses plotting Ro and EE using MC simulation from stats#
##############################################################
##############################################################
# Functions to calculate EE and Ro#
source('~/GitHub/bTB-bruc-co-infection-ms/pde/Ro_calculations.R', chdir = TRUE)#
source('~/GitHub/bTB-bruc-co-infection-ms/pde/get_EE.R', chdir = TRUE)#
#
# At ML parameters, find Ro and EE alone and with both pathogens#
##############################################################
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))#
#get_EE(params, x0, "beverton-holt")#
# 65.855 TB alone#
# 27.861 TB with co-infection#
# 21.072 BRUC alone#
# 31.493 BRUC with co-infection#
#
# make sure get ok age-prev#
xtest <- x0#
# MCMC Ro calculations#
# WARNING Ro reads in x0 frame global environment#
##############################################################
n = 1000#
set.seed(1)#
binsize <- N/agemax#
#
# set xB#
xstart <- x0#
xstart[min(ib.index)+1 + 3*binsize] <- 1#
xstart[min(it.index)+1 + 3*binsize] <- 1#
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))#
test <- as.data.frame(ode.1D(xstart, times, rhs, params, #
	nspec = 6, dimens = N, method = "ode45"))#
xB <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))])) #
plot_raw_numbers(test)#
#
# set xT#
xstart <- x0#
xstart[min(it.index)+1 + 3*binsize] <- 1#
xstart[min(it.index)+1 + 4*binsize] <- 1#
test <- as.data.frame(ode.1D(xstart, times, rhs, params, #
	nspec = 6, dimens = N, method = "ode45"))#
xT <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))])) #
plot_raw_numbers(test)
source('get_Ro.R', chdir = TRUE)
xB
xstart <- x0
xstart
xstart[min(ib.index)+1 + 3*binsize] <- 1#
xstart[min(ib.index)+1 + 3*binsize] <- 1#
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))#
test <- as.data.frame(ode.1D(xstart, times, rhs, params, #
	nspec = 6, dimens = N, method = "ode45"))#
xB <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))])) #
plot_raw_numbers(test)
####################################
	S <- x0[s.index]#
	ageflux <- params$aging[1,1]#
#
	# Calculate next generation matrix#
	Fmat = params$betaT* matrix(rep(S, each = N), nrow = N, byrow = T)#
	Vmat = diag(x = params$muT + ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- - ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values
max(Re(vals))
Vmat2 <- diag(x = params$muT)#
	V2inv <- solve(Vmat2)#
	vals2 <- eigen(Fmat %*% V2inv)$values
max(Re(vals2))
Vmat = diag(x = params$muT - ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values
max(Re(vals))
S <- x0[s.index]#
	S.fd <- S/sum(S)#
	ageflux <- params$aging[1,1]#
#
	Fmat <- params$betaB* matrix(rep(S.fd, each = N), nrow = N, byrow = T)#
	Fmat[which(ages >= 2 & ages <=5), ] <- exp(0.885) * Fmat[which(ages >= 2 & ages <=5), ]#
	Vmat <- diag(x = params$muB + params$gamma - ageflux)#
	Vmat[row(Vmat) - col(Vmat) == 1] <- ageflux#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values
max(Re(vals))
S <- xB[s.index]#
	Ib <- xB[ib.index]#
	R <- xB[r.index]#
#
	Tot <- sum(S) + sum(Ib) + sum(R)#
	Sall <- sum(S)#
	Iball <- sum(Ib)#
	Rall <- sum(R)#
	#  age specific FOI (vector)#
	params$betaB <- rep(params$betaB, length.out = N)#
	params$betaB[which(ages >= 2 & ages <=5)] <- exp(0.885) * params$betaB #
#
	# Calculate next generation matrix, 1:60 columns, 1:60 rows#
	Fmat = rbind(params$betaT * matrix(rep(S, each = 3*N), nrow = N, byrow = T),#
		params$rhoT * params$betaT * matrix(rep(Ib, each = 3*N), nrow = N, byrow = T),#
		params$rhoT * params$betaT * matrix(rep(R, each = 3*N), nrow = N, byrow = T))
####################################
	# Get stable age distribution in dz free conditions#
	S <- xB[s.index]#
	Ib <- xB[ib.index]#
	R <- xB[r.index]#
#
	Tot <- sum(S) + sum(Ib) + sum(R)#
	Sall <- sum(S)#
	Iball <- sum(Ib)#
	Rall <- sum(R)#
	#  age specific FOI (vector)#
	params$betaB <- rep(params$betaB, length.out = N)#
	params$betaB[which(ages >= 2 & ages <=5)] <- exp(0.885) * params$betaB[which(ages >= 2 & ages <=5)]
params$betaT * matrix(rep(S, each = 3*N), nrow = N, byrow = T)
t <- params$betaT * matrix(rep(S, each = 3*N), nrow = N, byrow = T)
t[1:10, 1:10]
nrows(t)
?n.rows
??nrows
nrow(t)
ncol(t)
Fmat = rbind(params$betaT * matrix(rep(S, each = 3*N), nrow = N, byrow = T),#
		params$rhoT * params$betaT * matrix(rep(Ib, each = 3*N), nrow = N, byrow = T),#
		params$rhoT * params$betaT * matrix(rep(R, each = 3*N), nrow = N, byrow = T))
nrow(Fmat)
ncol(Fmat)
# rows 1:N, cols 1:3*N#
	diag <- (params$rhoB * params$betaB * Iball / Tot) + params$muT - ageflux#
	M1 <- diag(x = diag)#
	M1[row(M1) - col(M1) == 1] <- ageflux#
	Vmat1 = cbind(M1, 		#
		matrix(0, nrow = N, ncol = 2*N) )#
#
	# rows 21:40, cols 1:60		 #
	diag <- - params$rhoB * params$betaBm * Iball / Tot   #
	M4 <- diag(x = diag)
M4[1:10, 1:10]
diag <- rep(- params$rhoB * params$betaBm * Iball / Tot , N )
M4 <- diag(x = diag)
M4[1:10, 1:10]
ncols(M4)
ncol(M4)
nrow(M4)
params$rhoB
params$betaB
diag <- rep(- params$rhoB * params$betaB * Iball / Tot , N )
diag <- - params$rhoB * params$betaB * Iball / Tot
M4 <- diag(x = diag)
ncol(M4)
nrow(M4)
diag <- params$gamma + params$muC - ageflux#
	M5 <- diag(x = diag)#
	M5[row(M5) - col(M5) == 1] <- - ageflux
M6 <- diag(x = rep(- params$epsilon), N)#
	Vmat2 <- cbind(M4, M5, M6)
################################################
# Ro of bTB in the absence of brucellosis, with age structure (and age sp. FOI, brucellosis)#
################################################
Ro_bTB_co = function(params, xB){#
	####################################
	# Input: x = c(S = final, 1*20 S vector at params)#
	# Output: Ro#
	####################################
	# Get stable age distribution in dz free conditions#
	S <- xB[s.index]#
	Ib <- xB[ib.index]#
	R <- xB[r.index]#
#
	Tot <- sum(S) + sum(Ib) + sum(R)#
	Sall <- sum(S)#
	Iball <- sum(Ib)#
	Rall <- sum(R)#
	ageflux <- params$aging[1,1]#
	#  age specific FOI (vector)#
	params$betaB <- rep(params$betaB, length.out = N)#
	params$betaB[which(ages >= 2 & ages <=5)] <- exp(0.885) * params$betaB[which(ages >= 2 & ages <=5)] #
#
	# Calculate next generation matrix, 1:60 columns, 1:60 rows#
	Fmat = rbind(params$betaT * matrix(rep(S, each = 3*N), nrow = N, byrow = T),#
		params$rhoT * params$betaT * matrix(rep(Ib, each = 3*N), nrow = N, byrow = T),#
		params$rhoT * params$betaT * matrix(rep(R, each = 3*N), nrow = N, byrow = T))#
	# rows 1:N, cols 1:3*N#
	diag <- (params$rhoB * params$betaB * Iball / Tot) + params$muT - ageflux#
	M1 <- diag(x = diag)#
	M1[row(M1) - col(M1) == 1] <- ageflux#
	Vmat1 = cbind(M1, 		#
		matrix(0, nrow = N, ncol = 2*N) )#
#
	# rows 21:40, cols 1:60		 #
	diag <- - params$rhoB * params$betaB * Iball / Tot #
	M4 <- diag(x = diag)#
	diag <- params$gamma + params$muC - ageflux#
	M5 <- diag(x = diag)#
	M5[row(M5) - col(M5) == 1] <- ageflux#
	M6 <- diag(x = rep(- params$epsilon), N)#
	Vmat2 <- cbind(M4, M5, M6)#
	# rows 41:60, cols 1:60		 #
	M7 <- matrix(0, nrow = N, ncol = N)#
	M8 <- diag(x = rep(-params$gamma, N))#
	M9 <- diag(x = params$epsilon + params$muRC - ageflux)#
	M9[row(M9 - col(M9) == 1)] <- ageflux#
	Vmat3 <- cbind(M7, M8, M9)#
	Vmat <- rbind(Vmat1, Vmat2, Vmat3)#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals)))   # 0.9634113#
}
Ro_bTB_single(params, x0)#
Ro_brucellosis_single(params, x0)#
Ro_bTB_co(params, xB)
# Get stable age distribution in TB only#
	S <- xT[s.index]#
	It <- xT[it.index]#
#
	Tot <- sum(S) + sum(It) #
	Sall <- sum(S)#
	Itall <- sum(It)#
#
	# age specific FOI (a vector)#
	params$betaB <- rep(params$betaB, length.out = N)#
	params$betaB[which(ages >= 2 & ages <=5)] <- exp(0.885) * params$betaB[which(ages >= 2 & ages <=5)] #
	params$betaT <- rep(params$betaT, length.out = N)
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))
# Get stable age distribution in TB only#
	S <- xT[s.index]#
	It <- xT[it.index]#
#
	Tot <- sum(S) + sum(It) #
	Sall <- sum(S)#
	Itall <- sum(It)#
#
	# age specific FOI (a vector)#
	betaBm <- rep(params$betaB, length.out = N)#
	betaBm[which(ages >= 2 & ages <=5)] <- exp(0.885) * params$betaB#
	betaTm <- rep(params$betaT, length.out = N)
################################################
# Ro of brucellosis in the presence of bTB, age structure#
################################################
#
Ro_brucellosis_co = function(params, xT){#
	####################################
	# Input: paramter file#
	####################################
	# Get stable age distribution in TB only#
	S <- xT[s.index]#
	It <- xT[it.index]#
#
	Tot <- sum(S) + sum(It) #
	Sall <- sum(S)#
	Itall <- sum(It)#
#
	ageflux <- params$aging[1,1]#
#
	# age specific FOI (a vector)#
	betaBm <- rep(params$betaB, length.out = N)#
	betaBm[which(ages >= 2 & ages <=5)] <- exp(0.885) * params$betaB#
	betaTm <- rep(params$betaT, length.out = N)#
#
	# Calculate next generation matrix, 1:40 columns, 1:40 rows#
	Fmat = rbind(#
		matrix(rep(betaBm * S / Tot, each = 2*N), nrow = N, byrow = T),#
		matrix(rep(params$rhoB * betaBm * It / Tot, each = 2*N), nrow = N, #
		byrow = T))#
#
	# Rows 1:20, cols 1:40#
	diag <- params$rhoT * params$betaT * Itall + params$muB + #
		params$gamma - ageflux#
	M1 <- diag(x = diag)#
	M1[row(M1) - col(M1) == 1] <- ageflux#
	Vmat1 = cbind(M1, 		#
		matrix(0, nrow = N, ncol = N) )#
#
	# Rows 21:40, cols 1:40		 #
	diag <- - params$rhoT * params$betaT * Itall  #
	M4 <- diag(x = diag)#
	diag <- params$gamma + params$muC - ageflux#
	M5 <- diag(x = diag)#
	M5[row(M5) - col(M5) == 1] <- ageflux#
	Vmat2 <- cbind(M4, M5)#
	Vmat <- rbind(Vmat1, Vmat2)#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals))) #
}
Ro_brucellosis_co(params, xT)
head(betaTm)
# Rows 21:40, cols 1:40		 #
	diag <- - params$rhoT * betaTm * Itall  #
	M4 <- diag(x = diag)#
	diag <- params$gamma + params$muC - ageflux#
	M5 <- diag(x = diag)#
	M5[row(M5) - col(M5) == 1] <- ageflux#
	Vmat2 <- cbind(M4, M5)
Vmat <- rbind(Vmat1, Vmat2)
ncol(Vmat1)
ncol(Vmat2)
ncol(Fmat)
# Calculate next generation matrix, 1:40 columns, 1:40 rows#
	Fmat = rbind(#
		matrix(rep(betaBm * S / Tot, each = N), nrow = N, byrow = T),#
		matrix(rep(params$rhoB * betaBm * It / Tot, each = N), nrow = N, #
		byrow = T))
params$betaT
diag <- params$rhoT * params$betaT * Itall + params$muB + #
		params$gamma - ageflux#
	M1 <- diag(x = diag)#
	M1[row(M1) - col(M1) == 1] <- ageflux
ncol(M1)
Vmat1 = cbind(M1, 		#
		matrix(0, nrow = N, ncol = N) )
ncol(Vmat1)
################################################
# Ro of brucellosis in the presence of bTB, age structure#
################################################
Ro_brucellosis_co = function(params, xT){#
	####################################
	# Input: paramter file#
	####################################
	# Get stable age distribution in TB only#
	S <- xT[s.index]#
	It <- xT[it.index]#
#
	Tot <- sum(S) + sum(It) #
	Sall <- sum(S)#
	Itall <- sum(It)#
#
	ageflux <- params$aging[1,1]#
#
	# age specific FOI (a vector)#
	betaBm <- rep(params$betaB, length.out = N)#
	betaBm[which(ages >= 2 & ages <=5)] <- exp(0.885) * params$betaB#
	betaTm <- rep(params$betaT, length.out = N)#
#
	# Calculate next generation matrix, 1:40 columns, 1:40 rows#
	Fmat = rbind(#
		matrix(rep(betaBm * S / Tot, each = N), nrow = N, byrow = T),#
		matrix(rep(params$rhoB * betaBm * It / Tot, each = N), nrow = N, #
		byrow = T))#
#
	# Rows 1:20, cols 1:40#
	diag <- params$rhoT * params$betaT * Itall + params$muB + #
		params$gamma - ageflux#
	M1 <- diag(x = diag)#
	M1[row(M1) - col(M1) == 1] <- ageflux#
	Vmat1 = cbind(M1, 		#
		matrix(0, nrow = N, ncol = N) )#
#
	# Rows 21:40, cols 1:40		 #
	diag <- - params$rhoT * betaTm * Itall  #
	M4 <- diag(x = diag)#
	diag <- params$gamma + params$muC - ageflux#
	M5 <- diag(x = diag)#
	M5[row(M5) - col(M5) == 1] <- ageflux#
	Vmat2 <- cbind(M4, M5)#
	Vmat <- rbind(Vmat1, Vmat2)#
	Vinv <- solve(Vmat)#
	vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals))) #
}
Ro_brucellosis_co(params, xT)
ncol(Vmat)
S <- xT[s.index]#
	It <- xT[it.index]#
#
	Tot <- sum(S) + sum(It) #
	Sall <- sum(S)#
	Itall <- sum(It)#
#
	ageflux <- params$aging[1,1]#
#
	# age specific FOI (a vector)#
	betaBm <- rep(params$betaB, length.out = N)#
	betaBm[which(ages >= 2 & ages <=5)] <- exp(0.885) * params$betaB#
	betaTm <- rep(params$betaT, length.out = N)#
#
	# Calculate next generation matrix, 1:40 columns, 1:40 rows#
	Fmat = rbind(#
		matrix(rep(betaBm * S / Tot, each = N), nrow = N, byrow = T),#
		matrix(rep(params$rhoB * betaBm * It / Tot, each = N), nrow = N, #
		byrow = T))#
#
	# Rows 1:20, cols 1:40#
	diag <- params$rhoT * params$betaT * Itall + params$muB + #
		params$gamma - ageflux#
	M1 <- diag(x = diag)#
	M1[row(M1) - col(M1) == 1] <- ageflux#
	Vmat1 = cbind(M1, 		#
		matrix(0, nrow = N, ncol = N) )#
#
	# Rows 21:40, cols 1:40		 #
	diag <- - params$rhoT * betaTm * Itall  #
	M4 <- diag(x = diag)#
	diag <- params$gamma + params$muC - ageflux#
	M5 <- diag(x = diag)#
	M5[row(M5) - col(M5) == 1] <- ageflux#
	Vmat2 <- cbind(M4, M5)
nrow(Vmat1)
ncol(Vmat)
ncol(Vmat1)
ncol(Vmat2)
nrow(Vmat2)
Vmat <- rbind(Vmat1, Vmat2)
Vinv <- solve(Vmat)
nrow(Vinv)
ncol(Vinv)
nrow(Fmat)
ncol(Fmat)
Fmat = rbind(#
		matrix(rep(betaBm * S / Tot, each = 2* N), nrow = 2*N, byrow = T),#
		matrix(rep(params$rhoB * betaBm * It / Tot, each = 2*N), nrow = 2* N, #
		byrow = T))
nrow(Fmat)
ncol(Fmat)
Fmat = rbind(#
		matrix(rep(betaBm * S / Tot, each = 2* N), nrow = N, byrow = T),#
		matrix(rep(params$rhoB * betaBm * It / Tot, each = 2*N), nrow = N, #
		byrow = T))
ncol(Fmat)
nrow(Fmat)
vals <- eigen(Fmat %*% Vinv)$values#
	return(max(Re(vals)))
max(Re(vals))
xB[(min(it.index)+50):(min(it.index)+53)] <- 1
head(eipB)
head(epiB)
min(ib.index)
##############################################################
##############################################################
# Erin Gorsich#
# This Code analyzes the pde co-infection model#
# model is defined in rhs; parameters in fixed_parameters#
##############################################################
##############################################################
##############################################################
#
##############################################################
##############################################################
#1) Load fixed parameters, model#
##############################################################
##############################################################
rm(list = ls())#
require("deSolve")#
library("plyr")#
library("ggplot2")#
library("lattice") # for levelplots#
library("gridExtra") # layout for lattice#
library("RColorBrewer")#
library("doParallel")#
library("foreach")#
library("deSolve")#
set.seed(5)#
#
setwd("~/GitHub/bTB-bruc-co-infection-ms/pde")#
#
# parameters#
source('fixed_parameters.R', chdir = TRUE)#
#
# rhs function - model structure#
source('rhs.R', chdir = TRUE)#
# age divisions in rhs function#
agemax <- 20#
agestep <- 0.1#
N <- agemax / agestep#
ages <- seq(1, agemax + 1, by = agestep)[-(N)]#
N == length(ages)#
#
# generate parameters with correct agebins#
f.params <- gen_fixed_params(agemax, agestep, p = p, recovery = FALSE)#
f.params.recov <- gen_fixed_params(agemax, agestep, p = p, recovery = TRUE)#
#
# Functions for plotting (and define indecies based on ages, N): #
source('plotting_functions.R', chdir = TRUE)#
#
# Starting agestructure (Jolles 2007; Caron et al. 2001)#
juv <- rep(0.137 / length(ages[ages < 2]), length(ages[ages < 2]))#
sa <- rep(0.368 / length(ages[ages >= 2 & ages < 6]), length(ages[ages >= 2 & ages < 6]))#
a <- rep(0.185 / length(ages[ages >= 6 & ages < 9]), length(ages[ages >= 6 & ages < 9]))#
ma <- rep(0.235 / length(ages[ages >= 9 & ages < 14]), length(ages[ages >= 9 & ages < 14]))#
sen <- rep(0.075 / length(ages[ages >= 14 ]), length(ages[ages >= 14]))#
#
relage <- c(juv, sa, a, ma, sen); length(relage) == N									#
plot.relage <- c(0.137, rep(0.368/4, 4), rep(0.185/3, 3), rep(0.235/5, 5), rep(0.075/7, 7)) 	#
# Define x0, parameter for getEE function, disease free values#
##############################################################
S0 <- 400 * relage; It0 <- 0 * relage; Ib0 <- 0 * relage#
Ic0 <- 0 * relage; R0 <- 0 * relage; Rc0 <- 0 * relage#
times <- seq(1, 300, 1)#
x0 <- c(S0, It0, Ib0, Ic0, R0, Rc0)#
params <- c(f.params, list(gamma = 1/2, betaB = 0, #
	betaT = 0, rhoT = 1, rhoB = 2.1))#
test <- as.data.frame(ode.1D(x0, times, rhs, params, #
	nspec = 6, dimens = N, method = "ode45"))#
x0 <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))])) #
#
##############################################################
##############################################################
#2) Analyses plotting Ro and EE using MC simulation from stats#
##############################################################
##############################################################
# Functions to calculate EE and Ro#
source('get_Ro.R', chdir = TRUE)#
source('get_EE.R', chdir = TRUE)#
#
# At ML parameters, find Ro and EE alone and with both pathogens#
##############################################################
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))#
#get_EE(params, x0, "beverton-holt")#
# 65.855 TB alone#
# 27.861 TB with co-infection#
# 21.072 BRUC alone#
# 31.493 BRUC with co-infection#
#
# make sure get ok age-prev#
xtest <- x0#
# MCMC Ro calculations#
# WARNING Ro reads in x0 frame global environment#
##############################################################
n = 1000#
set.seed(1)#
binsize <- N/agemax#
#
# set xB#
xstart <- x0#
xstart[min(ib.index)+1 + 3*binsize] <- 1#
xstart[min(ib.index)+1 + 3*binsize] <- 1#
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))#
test <- as.data.frame(ode.1D(xstart, times, rhs, params, #
	nspec = 6, dimens = N, method = "ode45"))#
xB <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))])) #
plot_raw_numbers(test)#
#
# set xT#
xstart <- x0#
xstart[min(it.index)+1 + 3*binsize] <- 1#
xstart[min(it.index)+1 + 4*binsize] <- 1#
test <- as.data.frame(ode.1D(xstart, times, rhs, params, #
	nspec = 6, dimens = N, method = "ode45"))#
xT <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))])) #
plot_raw_numbers(test)
x <- matrix(rnorm(1e+06), ncol = 10000)> itx <- iter(x, by = "row")> foreach(i = itx, .combine = c) %dopar% mean(i)
x <- matrix(rnorm(1e+06), ncol = 10000)itx <- iter(x, by = "row")foreach(i = itx, .combine = c) %dopar% mean(i)
itx
# Set up dataframe to hold the results#
##############################################################
rhoB_test <- seq(0, 8, length.out = 101)#
rhoT_test <- seq(0, 8, length.out = 101)#
mort_test <- seq(0, 15, length.out = 101) #
#
# Data frame to hold results of changing bruc effects on bTB#
epiTB <- data.frame(#
	rhoT= rep(rhoB_test, length(rhoB_test)), #
	mort = rep(mort_test, each = length(rhoB_test)), #
	bTBprev = NA, brucprev = NA, 	finalN = NA, #
	bTB_inS = NA, bTB_inB = NA, bruc_inS = NA, bruc_inTB = NA)#
#
# Data frame to hold results of changing bTB effects on bruc#
epiB <- data.frame(#
	rhoB= rep(rhoB_test, length(rhoB_test)), #
	mort = rep(mort_test, each = length(rhoB_test)),#
	bTBprev = NA, brucprev = NA, finalN = NA, #
	bTB_inS = NA, bTB_inB = NA, bruc_inS = NA, bruc_inTB = NA)
# xB, endemic age structure for brucellosis only set above#
xB.test <- xB#
xb.test[(min(it.index)+50):(min(it.index)+53)] <- 1
xB.test[(min(it.index)+50):(min(it.index)+53)] <- 1
cl <- makeCluster(6)#
registerDoParallel(cl)#
epiT <- foreach(i = l:2, .combine = rbind, .packages = "deSolve") %dopar% {#
	params.test <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = epiTB$rhoT[i], rhoB = 2.1))#
	params.test$muC <- epiTB$mort[i] * params.test$muS#
	params.test$muRC <- epiTB$mort[i] * params.test$muS#
	sol <- as.data.frame(ode.1D(xB.test, times, rhs, params.test, nspec = 6, dimens = N, ))#
	temp <- get_prevalence(sol)#
#
	data <- data.frame(#
		rhoT = params.test$rhoT,#
		mort = params.test$muC[1]/ params.test$muS[1],#
		bTBprev = temp$prevTB,#
		brucprev = temp$prevB, 	#
		finalN = sum(sol[length(sol), c(2:length(colnames(sol)))]),#
		bTB_inS = temp$prevTinS ,#
		bTB_inB = temp$prevTinB,#
		bruc_inS = temp$prevBinS ,#
		bruc_inTB = temp$prevBinT,#
	)#
	rm(params.test, sol, temp)#
}#
stopCluster(cl)#
#
summary(epiT)
cl <- makeCluster(6)#
registerDoParallel(cl)#
epiT <- foreach(i = l:2, .combine = rbind, .packages = "deSolve") %dopar% {#
	params.test <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = epiTB$rhoT[i], rhoB = 2.1))#
	params.test$muC <- epiTB$mort[i] * params.test$muS#
	params.test$muRC <- epiTB$mort[i] * params.test$muS#
	sol <- as.data.frame(ode.1D(xB.test, times, rhs, params.test, nspec = 6, dimens = N))#
	temp <- get_prevalence(sol)#
#
	data <- data.frame(#
		rhoT = params.test$rhoT,#
		mort = params.test$muC[1]/ params.test$muS[1],#
		bTBprev = temp$prevTB,#
		brucprev = temp$prevB, 	#
		finalN = sum(sol[length(sol), c(2:length(colnames(sol)))]),#
		bTB_inS = temp$prevTinS ,#
		bTB_inB = temp$prevTinB,#
		bruc_inS = temp$prevBinS ,#
		bruc_inTB = temp$prevBinT,#
	)#
	rm(params.test, sol, temp)#
}#
stopCluster(cl)#
#
summary(epiT)
registerDoParallel(cl)#
epiT <- foreach(d = iter(epiTB[1:2,], by = 'row'), .combine = rbind, .packages = "deSolve") %dopar% {#
	params.test <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = d$rhoT, rhoB = 2.1))#
	params.test$muC <- d$mort * params.test$muS#
	params.test$muRC <- d$mort * params.test$muS#
	sol <- as.data.frame(ode.1D(xB.test, times, rhs, params.test, nspec = 6, dimens = N))#
	temp <- get_prevalence(sol)#
#
	data <- data.frame(#
		rhoT = params.test$rhoT,#
		mort = params.test$muC[1]/ params.test$muS[1],#
		bTBprev = temp$prevTB,#
		brucprev = temp$prevB, 	#
		finalN = sum(sol[length(sol), c(2:length(colnames(sol)))]),#
		bTB_inS = temp$prevTinS ,#
		bTB_inB = temp$prevTinB,#
		bruc_inS = temp$prevBinS ,#
		bruc_inTB = temp$prevBinT,#
	)#
	rm(params.test, sol, temp)#
}#
stopCluster(cl)#
#
summary(epiT)
registerDoParallel(cl)#
epiT <- foreach(d = iter(epiTB, by = 'row'), .combine = rbind, .packages = "deSolve") %dopar% {#
	params.test <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = d$rhoT, rhoB = 2.1))#
	params.test$muC <- d$mort * params.test$muS#
	params.test$muRC <- d$mort * params.test$muS#
	sol <- as.data.frame(ode.1D(xB.test, times, rhs, params.test, nspec = 6, dimens = N))#
	temp <- get_prevalence(sol)#
#
	data <- data.frame(#
		rhoT = params.test$rhoT,#
		mort = params.test$muC[1]/ params.test$muS[1],#
		bTBprev = temp$prevTB,#
		brucprev = temp$prevB, 	#
		finalN = sum(sol[length(sol), c(2:length(colnames(sol)))]),#
		bTB_inS = temp$prevTinS ,#
		bTB_inB = temp$prevTinB,#
		bruc_inS = temp$prevBinS ,#
		bruc_inTB = temp$prevBinT,#
	)#
	rm(params.test, sol, temp)#
}#
stopCluster(cl)#
#
summary(epiT)
cl <- makeCluster(6)#
registerDoParallel(cl)#
epiT <- foreach(d = iter(epiTB, by = 'row'), .combine = rbind, .packages = "deSolve") %dopar% {#
	params.test <- c(f.params, list(gamma = 1/2, betaB = 0.5764065, #
		betaT = 1.3305462/1000, rhoT = d$rhoT, rhoB = 2.1))#
	params.test$muC <- d$mort * params.test$muS#
	params.test$muRC <- d$mort * params.test$muS#
	sol <- as.data.frame(ode.1D(xB.test, times, rhs, params.test, nspec = 6, dimens = N))#
	temp <- get_prevalence(sol)#
#
	data <- data.frame(#
		rhoT = params.test$rhoT,#
		mort = params.test$muC[1]/ params.test$muS[1],#
		bTBprev = temp$prevTB,#
		brucprev = temp$prevB, 	#
		finalN = sum(sol[length(sol), c(2:length(colnames(sol)))]),#
		bTB_inS = temp$prevTinS ,#
		bTB_inB = temp$prevTinB,#
		bruc_inS = temp$prevBinS ,#
		bruc_inTB = temp$prevBinT,#
	)#
	rm(params.test, sol, temp)#
}#
stopCluster(cl)
