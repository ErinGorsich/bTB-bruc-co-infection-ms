predY[i] <- Y[i-1];
Y[i] ~ dnorm(predY[i], tau.pro);
}
}
",file=model.loc)
jags.data = list("Y"=Wind,"N"=N)
jags.params=c("sd.pro","predY","mu")
data(airquality)
Wind = airquality$Wind
jags.data = list("Y"=Wind,"N"=N)
Temp = airquality$Temp # air temperature
N = dim(airquality)[1]
jags.data = list("Y"=Wind,"N"=N)
jags.params=c("sd.pro","predY","mu")
mod_rw_intercept = jags(jags.data, parameters.to.save=jags.params, model.file=model.loc, n.chains = 3, n.burnin=5000, n.thin=1, n.iter=10000, DIC=TRUE)
detach("package:R2jags", unload=TRUE)
library("R2WinBUGS", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:R2WinBUGS", unload=TRUE)
setwd("~/Documents/Avian_Influenza/HP/statistical model")
###############################################################
# 3. AR(1) MODEL WITH NO ESTIMATED AR COEFFICIENT = RANDOM WALK # no covariates. The model is y[t] ~ Normal(y[n-1], sigma) for
# we'll call the precision tau.pro
# Note too that we have to define predY[1]
################################################################
data(airquality)
Wind = airquality$Wind
Temp = airquality$Temp # air temperature
N = dim(airquality)[1]
model.loc=("rw_intercept.txt")
jagsscript = cat("
model {
mu ~ dnorm(0, 0.01);
tau.pro ~ dgamma(0.001,0.001);
sd.pro <- 1/sqrt(tau.pro);
predY[1] <- mu; # initial value
for(i in 2:N) {
predY[i] <- Y[i-1];
Y[i] ~ dnorm(predY[i], tau.pro);
}
}
",file=model.loc)
jags.data = list("Y"=Wind,"N"=N)
jags.params=c("sd.pro","predY","mu")
mod_rw_intercept = jags(jags.data, parameters.to.save=jags.params, model.file=model.loc, n.chains = 3, n.burnin=5000, n.thin=1, n.iter=10000, DIC=TRUE)
setwd("~/Documents/Avian_Influenza/HP/statistical model/trailcode")
# load models
source('define_models.R')
source('define_neighborhood.R')
source('model selction function.R')
nadapt <- 500
niter <- 10
thin <- 1
n <- readRDS("~/Documents/Avian_Influenza/HP/statistical model/data_n.rds")
y <- readRDS("~/Documents/Avian_Influenza/HP/statistical model/data_y.rds")
#define nsites to match new y matrix
nsites <- dim(y)[3]
nyears <- dim(y)[2]
nmonths <- dim(y)[1]
npi <- nsites*nyears*nmonths
#define data for running the AR1 model, no W matrix
jags.data <- list(nsites=nsites, nmonths=nmonths, nyears=nyears, y=y, n=n)
jags.inits <- function(){
list("Se" = runif(1, 0.6, 1), "Sp" = runif(1, 0.6, 1),
"pi0" = array(runif(npi), dim = c(nmonths, nyears)),
"phi" = runif(0, 1))  # tau?
}
data <- jags.data
textfile <- "ar1_constant_sensitivity.txt"
inits <- jags.inits
variable.names <- variable.names
n.chains <- 1
n.adapt <- nadapt
n.iter <- n.iter
thin <- thin
n.iter <- niter
mod <- jags.model(file=textfile, data=data, inits=inits, n.chains=n.chains,
n.adapt=n.adapt)
mod <- jags(file=textfile, data=data, inits=inits, n.chains=n.chains,
n.adapt=n.adapt)
library(R2jags)
mod <- jags(file=textfile, data=data, inits=inits, n.chains=n.chains,
n.adapt=n.adapt)
mod <- jags(jags.data, variable.names, model.file = textfile, n.chains, n.burnin = 50, n.iter = n.iter)
?jags
head(jags.data)
mod <- jags(jags.data, variable.names, model.file = textfile, n.chains, n.burnin = 50, n.iter = n.iter)
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = textfile, n.chains = 2, n.burnin = 50, n.iter = n.iter)
# Model 3 - AR1 - autocorrelation in time (months)
sink("ar1_constant_sensitivity.txt")
cat("model{
# Priors
Se~dbeta(20.833,4.148)
Sp~dbeta(8.403,1.001)
# AR1 Priors
for (j in 1:nyears){
for (k in 1:nsites){
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
pi0[j, k] ~ dunif(0, 1)
}
}
rho ~ dunif(-1, 1)
for (i in 1:nmonths){
epsilon[i] ~ dnorm(0, tau)
}
tau ~ dgamma(0.001, 0.001)
#likelihood (i = month, j = year, k = site)
for(k in 1:nsites){
for (j in 1:nyears) {
g[1,j,k] <- (Se*pi[1,j,k])+(1-Sp)*(1-pi[1,j,k])
y[1,j,k] ~ dbin(g[1,j,k], n[1,j,k])
}
}
for(i in 2:nmonths){
for(j in 1:nyears){
for(k in 1:nsites){
g[i,j,k] <- (Se*pi[i,j,k])+(1-Sp)*(1-pi[i,j,k])
y[i,j,k] ~ dbin(g[i,j,k], n[i,j,k])
logit_pi[i, j, k] <- log(pi[i, j, k] / (1 - pi[i, j, k]))
#logit_pi[i, j, k] <- lmupi[j,k] +
#rho * log(pi[i-1, j, k]/ (1 - pi[i-1, j, k])) +
#epsilon[i]
pred_pi[i, j, k] <- lmupi[j, k] +
rho * log(pi[i-1, j, k]/ (1 - pi[i-1, j, k]))
logit_pi[i, j, k] ~ dnorm(pred_pi[i, j, k], tau)
}
}
}
}", fill=TRUE)
sink()
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = textfile, n.chains = 2, n.burnin = 50, n.iter = n.iter)
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = ""ar1_constant_sensitivity.txt"", n.chains = 2, n.burnin = 50, n.iter = n.iter)
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = "ar1_constant_sensitivity.txt", n.chains = 2, n.burnin = 50, n.iter = n.iter)
sink("ar1_constant_sensitivity.txt")
cat("model{
# Priors
Se~dbeta(20.833,4.148)
Sp~dbeta(8.403,1.001)
# AR1 Priors
for (j in 1:nyears){
for (k in 1:nsites){
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
pi0[j, k] ~ dunif(0, 1)
}
}
rho ~ dunif(-1, 1)
tau ~ dgamma(0.001, 0.001)
#likelihood (i = month, j = year, k = site)
for(k in 1:nsites){
for (j in 1:nyears) {
g[1,j,k] <- (Se*pi[1,j,k])+(1-Sp)*(1-pi[1,j,k])
y[1,j,k] ~ dbin(g[1,j,k], n[1,j,k])
}
}
for(i in 2:nmonths){
for(j in 1:nyears){
for(k in 1:nsites){
g[i,j,k] <- (Se*pi[i,j,k])+(1-Sp)*(1-pi[i,j,k])
y[i,j,k] ~ dbin(g[i,j,k], n[i,j,k])
logit_pi[i, j, k] <- log(pi[i, j, k] / (1 - pi[i, j, k]))
pred_pi[i, j, k] <- lmupi[j, k] +
rho * logit_pi[i-1, j, k]
#pred_pi[i, j, k] <- lmupi[j, k] +
#    rho * log(pi[i-1, j, k]/ (1 - pi[i-1, j, k]))
logit_pi[i, j, k] ~ dnorm(pred_pi[i, j, k], tau)
}
}
}
}", fill=TRUE)
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = "ar1_constant_sensitivity.txt", n.chains = 2, n.burnin = 50, n.iter = n.iter)
getwd()
getwd
sink("ar1_constant_sensitivity.txt")
cat("model{
# Priors
Se~dbeta(20.833,4.148)
Sp~dbeta(8.403,1.001)
# AR1 Priors
for (j in 1:nyears){
for (k in 1:nsites){
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
pi0[j, k] ~ dunif(0, 1)
}
}
rho ~ dunif(-1, 1)
tau ~ dgamma(0.001, 0.001)
#likelihood (i = month, j = year, k = site)
for(k in 1:nsites){
for (j in 1:nyears) {
g[1,j,k] <- (Se*pi[1,j,k])+(1-Sp)*(1-pi[1,j,k])
y[1,j,k] ~ dbin(g[1,j,k], n[1,j,k])
}
}
for(i in 2:nmonths){
for(j in 1:nyears){
for(k in 1:nsites){
g[i,j,k] <- (Se*pi[i,j,k])+(1-Sp)*(1-pi[i,j,k])
y[i,j,k] ~ dbin(g[i,j,k], n[i,j,k])
logit_pi[i, j, k] <- log(pi[i, j, k] / (1 - pi[i, j, k]))
pred_pi[i, j, k] <- lmupi[j, k] +
rho * logit_pi[i-1, j, k]
#pred_pi[i, j, k] <- lmupi[j, k] +
#    rho * log(pi[i-1, j, k]/ (1 - pi[i-1, j, k]))
logit_pi[i, j, k] ~ dnorm(pred_pi[i, j, k], tau)
}
}
}
}", fill=TRUE)
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = "ar1_constant_sensitivity.txt", n.chains = 2, n.burnin = 50, n.iter = n.iter)
for(i in 2:nmonths){
for(j in 1:nyears){
for(k in 1:nsites){
g[i,j,k] <- (Se*pi[i,j,k])+(1-Sp)*(1-pi[i,j,k])
y[i,j,k] ~ dbin(g[i,j,k], n[i,j,k])
logit_pi[i, j, k] <- log(pi[i, j, k] / (1 - pi[i, j, k]))
pred_pi[i, j, k] <- lmupi[j, k] +
rho * log(pi[i-1, j, k]/ (1 - pi[i-1, j, k]))
logit_pi[i, j, k] ~ dnorm(pred_pi[i, j, k], tau)
}
}
}
Se <- 2
Sp <- 3
for (j in 1:nyears){
for (k in 1:nsites){
pi0[j, k] <-  0.5
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
}
}
pi0 <- NA
for (j in 1:nyears){
for (k in 1:nsites){
pi0[j, k] <-  0.5
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
}
}
pi0 <- matrix(NA)
for (j in 1:nyears){
for (k in 1:nsites){
pi0[j, k] <-  0.5
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
}
}
lmupi <- matrix(NA)
for (j in 1:nyears){
for (k in 1:nsites){
pi0[j, k] <-  0.5
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
}
}
jags.inits
# Model 3 - AR1 - autocorrelation in time (months)
sink("ar1_constant_sensitivity.txt")
cat("model{
# Priors
Se~dbeta(20.833,4.148)
Sp~dbeta(8.403,1.001)
AR1 Priors
for (j in 1:nyears){
for (k in 1:nsites){
pi0[j, k] ~ dunif(0, 1)
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
}
}
rho ~ dunif(-1, 1)
tau ~ dgamma(0.001, 0.001)
#likelihood (i = month, j = year, k = site)
for(k in 1:nsites){
for (j in 1:nyears) {
y[1,j,k] ~ dbin(g[1,j,k], n[1,j,k])
g[1,j,k] <- (Se*pi[1,j,k])+(1-Sp)*(1-pi[1,j,k])
logit_pi[1, j, k] <- log(pi[1, j, k] / (1 - pi[1, j, k]))
}
}
for(i in 2:nmonths){
for(j in 1:nyears){
for(k in 1:nsites){
g[i,j,k] <- (Se*pi[i, j, k])+(1-Sp)*(1-pi[i,j,k])
y[i,j,k] ~ dbin(g[i, j, k], n[i,j,k])
logit_pi[i, j, k] <- log(pi[i, j, k] / (1 - pi[i, j, k]))
pred_pi[i, j, k] <- lmupi[j, k] +
rho * logit_pi[i-1, j, k]
logit_pi[i, j, k] ~ dnorm(pred_pi[i, j, k], tau)
}
}
}
}", fill=TRUE)
sink()
setwd("~/Documents/Avian_Influenza/HP/statistical model/trailcode")
# Model 3 - AR1 - autocorrelation in time (months)
sink("ar1_constant_sensitivity.txt")
cat("model{
# Priors
Se~dbeta(20.833,4.148)
Sp~dbeta(8.403,1.001)
AR1 Priors
for (j in 1:nyears){
for (k in 1:nsites){
pi0[j, k] ~ dunif(0, 1)
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
}
}
rho ~ dunif(-1, 1)
tau ~ dgamma(0.001, 0.001)
#likelihood (i = month, j = year, k = site)
for(k in 1:nsites){
for (j in 1:nyears) {
y[1,j,k] ~ dbin(g[1,j,k], n[1,j,k])
g[1,j,k] <- (Se*pi[1,j,k])+(1-Sp)*(1-pi[1,j,k])
logit_pi[1, j, k] <- log(pi[1, j, k] / (1 - pi[1, j, k]))
}
}
for(i in 2:nmonths){
for(j in 1:nyears){
for(k in 1:nsites){
g[i,j,k] <- (Se*pi[i, j, k])+(1-Sp)*(1-pi[i,j,k])
y[i,j,k] ~ dbin(g[i, j, k], n[i,j,k])
logit_pi[i, j, k] <- log(pi[i, j, k] / (1 - pi[i, j, k]))
pred_pi[i, j, k] <- lmupi[j, k] +
rho * logit_pi[i-1, j, k]
logit_pi[i, j, k] ~ dnorm(pred_pi[i, j, k], tau)
}
}
}
}", fill=TRUE)
sink()
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = "ar1_constant_sensitivity.txt", n.chains = 2, n.burnin = 50, n.iter = n.iter)
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = "ar1_constant_sensitivity.txt", n.chains = 2, n.burnin = 50, n.iter = n.iter)
# Model 3 - AR1 - autocorrelation in time (months)
sink("ar1_constant_sensitivity.txt")
cat("model{
# Priors
Se~dbeta(20.833,4.148)
Sp~dbeta(8.403,1.001)
#AR1 Priors
for (j in 1:nyears){
for (k in 1:nsites){
pi0[j, k] ~ dunif(0, 1)
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
}
}
rho ~ dunif(-1, 1)
tau ~ dgamma(0.001, 0.001)
#likelihood (i = month, j = year, k = site)
for(k in 1:nsites){
for (j in 1:nyears) {
y[1,j,k] ~ dbin(g[1,j,k], n[1,j,k])
g[1,j,k] <- (Se*pi[1,j,k])+(1-Sp)*(1-pi[1,j,k])
logit_pi[1, j, k] <- log(pi[1, j, k] / (1 - pi[1, j, k]))
}
}
for(i in 2:nmonths){
for(j in 1:nyears){
for(k in 1:nsites){
g[i,j,k] <- (Se*pi[i, j, k])+(1-Sp)*(1-pi[i,j,k])
y[i,j,k] ~ dbin(g[i, j, k], n[i,j,k])
pi[i, j, k] <- exp(logit_pi[i, j, k] / (1 + logit_pi[i, j, k]))
pred_pi[i, j, k] <- lmupi[j, k] +
rho * log(pi[i-1, j, k]/ (1 - pi[i-1, j, k]))
logit_pi[i, j, k] ~ dnorm(pred_pi[i, j, k], tau)
}
}
}
}", fill=TRUE)
sink()
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = "ar1_constant_sensitivity.txt", n.chains = 2, n.burnin = 50, n.iter = n.iter)
# Model 3 - AR1 - autocorrelation in time (months)
sink("ar1_constant_sensitivity.txt")
cat("model{
# Priors
Se~dbeta(20.833,4.148)
Sp~dbeta(8.403,1.001)
#AR1 Priors
for (j in 1:nyears){
for (k in 1:nsites){
pi0[j, k] ~ dunif(0, 1)
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
}
}
rho ~ dunif(-1, 1)
tau ~ dgamma(0.001, 0.001)
#likelihood (i = month, j = year, k = site)
for(k in 1:nsites){
for (j in 1:nyears) {
y[1,j,k] ~ dbin(g[1,j,k], n[1,j,k])
g[1,j,k] <- (Se*pi[1,j,k])+(1-Sp)*(1-pi[1,j,k])
#logit_pi[1, j, k] <- log(pi[1, j, k] / (1 - pi[1, j, k]))
}
}
for(i in 2:nmonths){
for(j in 1:nyears){
for(k in 1:nsites){
g[i,j,k] <- (Se*pi[i, j, k])+(1-Sp)*(1-pi[i,j,k])
y[i,j,k] ~ dbin(g[i, j, k], n[i,j,k])
pi[i, j, k] <- exp(logit_pi[i, j, k] / (1 + logit_pi[i, j, k]))
pred_pi[i, j, k] <- lmupi[j, k] +
rho * log(pi[i-1, j, k]/ (1 - pi[i-1, j, k]))
logit_pi[i, j, k] ~ dnorm(pred_pi[i, j, k], tau)
}
}
}
}", fill=TRUE)
sink()
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = "ar1_constant_sensitivity.txt", n.chains = 2, n.burnin = 50, n.iter = n.iter)
sink("ar1_constant_sensitivity.txt")
cat("model{
# Priors
Se~dbeta(20.833,4.148)
Sp~dbeta(8.403,1.001)
#AR1 Priors
for (j in 1:nyears){
for (k in 1:nsites){
pi0[j, k] ~ dunif(0, 1)
lmupi[j, k] <- log(pi0[j, k]/(1 - pi0[j, k]))
}
}
rho ~ dunif(-1, 1)
tau ~ dgamma(0.001, 0.001)
#likelihood (i = month, j = year, k = site)
for(k in 1:nsites){
for (j in 1:nyears) {
y[1,j,k] ~ dbin(g[1,j,k], n[1,j,k])
g[1,j,k] <- (Se*pi[1,j,k])+(1-Sp)*(1-pi[1,j,k])
pi[1, j, k] <- exp(logit_pi[1, j, k] / (1 + logit_pi[1, j, k]))
}
}
for(i in 2:nmonths){
for(j in 1:nyears){
for(k in 1:nsites){
g[i,j,k] <- (Se*pi[i, j, k])+(1-Sp)*(1-pi[i,j,k])
y[i,j,k] ~ dbin(g[i, j, k], n[i,j,k])
pi[i, j, k] <- exp(logit_pi[i, j, k] / (1 + logit_pi[i, j, k]))
pred_pi[i, j, k] <- lmupi[j, k] +
rho * log(pi[i-1, j, k]/ (1 - pi[i-1, j, k]))
logit_pi[i, j, k] ~ dnorm(pred_pi[i, j, k], tau)
}
}
}
}", fill=TRUE)
sink()
mod <- jags(data = jags.data, parameters.to.save = variable.names, model.file = "ar1_constant_sensitivity.txt", n.chains = 2, n.burnin = 50, n.iter = n.iter)
##################################################
##################################################
# 1) Load fixed parameters, model
###################################################
###################################################
# Accessory functions for fitting:
rm(list = ls())
require("deSolve")
library("gridExtra")
library("ggplot2")
library("lattice") # for levelplots
setwd("~/GitHub/bTB-bruc-co-infection-ms/pde")
# parameters
source('fixed_parameters.R', chdir = TRUE)
# rhs function - model structure
source('rhs.R', chdir = TRUE)
#############################################################
#############################################################
#2) Set-up features of aging
#############################################################
#############################################################
agemax <- 20
agestep <- 0.1
N <- agemax / agestep
ages <- seq(1, agemax + 1, by = agestep)[-(N)]
binsize <- N / agemax
N == length(ages)
# generate parameters with correct agebins
f.params <- gen_fixed_params(agemax, agestep, p = p, recovery = FALSE)
f.params.recov <- gen_fixed_params(agemax, agestep, p = p, recovery = TRUE)
# Functions for plotting (and define indecies based on ages, N):
source('plotting_functions.R', chdir = TRUE)
# Starting agestructure (Jolles 2007; Caron et al. 2001)
juv <- rep(0.137 / length(ages[ages < 2]), length(ages[ages < 2]))
sa <- rep(0.368 / length(ages[ages >= 2 & ages < 6]), length(ages[ages >= 2 & ages < 6]))
a <- rep(0.185 / length(ages[ages >= 6 & ages < 9]), length(ages[ages >= 6 & ages < 9]))
ma <- rep(0.235 / length(ages[ages >= 9 & ages < 14]), length(ages[ages >= 9 & ages < 14]))
sen <- rep(0.075 / length(ages[ages >= 14 ]), length(ages[ages >= 14]))
relage <- c(juv, sa, a, ma, sen); length(relage) == N
# Initial conditions
S0 <- 400 * relage; It0 <- 0 * relage; Ib0 <- 0 * relage
Ic0 <- 0 * relage; R0 <- 0 * relage; Rc0 <- 0 * relage
times <- seq(1, 500, 1)
x0 <- c(S0, It0, Ib0, Ic0, R0, Rc0)
# set stable age structure in disease free context (1200 long N*6)
params <- c(f.params, list(gamma = 1/2, betaB = 0.6087396,
betaT = 0.0012974553, rhoT = 1, rhoB = 2.1))
#params$muC > 1
params.recov <- c(f.params.recov, list(gamma = 1/2, betaB = 0.6087396,
betaT = 0.0012974553, rhoT = 1, rhoB = 2.1))
# use based on speed
test <- as.data.frame(ode.1D(x0, times, rhs, params, nspec = 6, dimens = N, method = "ode45"))
stable_age <- unname(unlist( test[length(test[,1]), c(2:(length(ages)+1))] /
sum(test[length(test[,1]), c(2:(length(ages)+1))]) ))
# no infections...
plot_raw_numbers(test)
get_prevalence(test)
prevTBobs <- 0.27  # for test- bootstrap estimate of overall prevalence
prevBobs <- 0.34
data <- read.csv("~/Documents/postdoc_buffology/Last-Thesis-Chapter!!!!!!/final_datasets_copied_from_phdfolder/cross_sectional_data_withdz_cleandisease_nofinal_Feb2016_capturetime_forsurv.csv")
counts<- hist(data$age_sel/12, plot = FALSE)$counts  # youngest = 1.4 so aged 1-2
agestructure<- counts/sum(counts)
agestructure_yr = c(agestructure, 0, 0, 0, 0, 0)
data_agestructure <- agestructure_yr
# Set starting prevalence for brucellosis in simulations
S0 <- 400 * stable_age; It0 <- 0 * stable_age; Ib0 <- 10 * stable_age
Ic0 <- 0 * stable_age; R0 <- 0 * stable_age; Rc0 <- 0 * stable_age
x0 <- c(S0, It0, Ib0, Ic0, R0, Rc0)
sol <- as.data.frame(ode.1D(x0, times, rhs, params, nspec = 6, dimens = N, method = "ode45"))
# Bruc prev to introduct BTB to in the optimizer
xB <- unname(unlist( sol[length(sol[,1]), c(2:length(colnames(sol)))] )) # 27% bruc prev
head(xB)
