#############################################################
#############################################################
# Erin Gorsich
# This Code analyzes the pde co-infection model
# model is defined in rhs; parameters in fixed_parameters
#############################################################
#############################################################
#############################################################
#############################################################
#############################################################
#1) Load fixed parameters, model
#############################################################
#############################################################
rm(list = ls())
require("deSolve")
library("plyr")
library("ggplot2")
library("lattice") # for levelplots
library("gridExtra") # layout for lattice
library("RColorBrewer")
library("doParallel")
library("foreach")
library("deSolve")
set.seed(5)
setwd("~/GitHub/bTB-bruc-co-infection-ms/pde")
# parameters
source('fixed_parameters.R', chdir = TRUE)
# rhs function - model structure
source('rhs.R', chdir = TRUE)
# age divisions in rhs function
agemax <- 20
agestep <- 0.1
N <- agemax / agestep
ages <- seq(1, agemax + 1, by = agestep)[-(N)]
N == length(ages)
# generate parameters with correct agebins
f.params <- gen_fixed_params(agemax, agestep, p = p, recovery = FALSE)
f.params.recov <- gen_fixed_params(agemax, agestep, p = p, recovery = TRUE)
# Functions for plotting (and define indecies based on ages, N):
source('plotting_functions.R', chdir = TRUE)
# Starting agestructure (Jolles 2007; Caron et al. 2001)
juv <- rep(0.137 / length(ages[ages < 2]), length(ages[ages < 2]))
sa <- rep(0.368 / length(ages[ages >= 2 & ages < 6]), length(ages[ages >= 2 & ages < 6]))
a <- rep(0.185 / length(ages[ages >= 6 & ages < 9]), length(ages[ages >= 6 & ages < 9]))
ma <- rep(0.235 / length(ages[ages >= 9 & ages < 14]), length(ages[ages >= 9 & ages < 14]))
sen <- rep(0.075 / length(ages[ages >= 14 ]), length(ages[ages >= 14]))
relage <- c(juv, sa, a, ma, sen); length(relage) == N
plot.relage <- c(0.137, rep(0.368/4, 4), rep(0.185/3, 3), rep(0.235/5, 5), rep(0.075/7, 7))
# Define x0, parameter for getEE function, disease free values
#############################################################
S0 <- 400 * relage; It0 <- 0 * relage; Ib0 <- 0 * relage
Ic0 <- 0 * relage; R0 <- 0 * relage; Rc0 <- 0 * relage
times <- seq(1, 300, 1)
x0 <- c(S0, It0, Ib0, Ic0, R0, Rc0)
params <- c(f.params, list(gamma = 1/2, betaB = 0,
betaT = 0, rhoT = 1, rhoB = 2.1))
test <- as.data.frame(ode.1D(x0, times, rhs, params,
nspec = 6, dimens = N, method = "ode45"))
x0 <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))]))
#############################################################
#############################################################
#2) Analyses plotting Ro and EE using MC simulation from stats
#############################################################
#############################################################
# Functions to calculate EE and Ro
source('get_Ro.R', chdir = TRUE)
source('get_EE.R', chdir = TRUE)
# At ML parameters, find Ro and EE alone and with both pathogens
#############################################################
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065,
betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))
#get_EE(params, x0, "beverton-holt")
# 65.855 TB alone
# 27.861 TB with co-infection
# 21.072 BRUC alone
# 31.493 BRUC with co-infection
# make sure get ok age-prev
xtest <- x0
#############################################################
n = 1000
set.seed(1)
binsize <- N/agemax
# set xB
xstart <- x0
xstart[min(ib.index)+1 + 3*binsize] <- 1
xstart[min(ib.index)+1 + 3*binsize] <- 1
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065,
betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))
test <- as.data.frame(ode.1D(xstart, times, rhs, params,
nspec = 6, dimens = N, method = "ode45"))
xB <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))]))
plot_raw_numbers(test)
# set xT
xstart <- x0
xstart[min(it.index)+1 + 3*binsize] <- 1
xstart[min(it.index)+1 + 4*binsize] <- 1
test <- as.data.frame(ode.1D(xstart, times, rhs, params,
nspec = 6, dimens = N, method = "ode45"))
xT <- unname(unlist(test[length(test[,1]), c(2:(length(colnames(test))))]))
plot_raw_numbers(test)
n
n = 3
n
# Generate 1000 samples
cl <- makeCluster(6)
# cl <- makeCluster(10) # work computer
registerDoParallel(cl)
d <- foreach(icount(n), .combine = rbind) %dopar% {
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065,
betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))
params$rhoB<- exp(rnorm(n = 1, mean = 0.75579, sd = 0.40714))
B <- rnorm(n = 1, mean = 1.1060, sd = 0.3505)
TB <- rnorm(n = 1, mean = 1.0370, sd = 0.3483)
params$muB <- params$muS * exp(B)
params$muT <- params$muS * exp(TB)
params$muC <- params$muS * exp(B + TB)
params$muR <- params$muT
params$muRC <- params$muC
data <- data.frame(
rhoB = params$rhoB,
dB = params$muB[1]/ params$muS[1],
dT = params$muT[1]/ params$muS[1],
Ro_bTB_single = Ro_bTB_single(params, x0),
Ro_bTB_co = Ro_bTB_co(params, xB),
Ro_brucellosis_single = Ro_brucellosis_single(params, x0),
Ro_brucellosis_co = Ro_brucellosis_co(params, xT))
}
stopCluster(cl)
d
n
# Generate 1000 samples
cl <- makeCluster(6)
# cl <- makeCluster(10) # work computer
registerDoParallel(cl)
d2 <- foreach(icount(n), .combine = rbind, .packages = "deSolve") %dopar% {
params <- c(f.params, list(gamma = 1/2, betaB = 0.5764065,
betaT = 1.3305462/1000, rhoT = 1, rhoB = 2.1))
params$rhoB<- exp(rnorm(n = 1, mean = 0.75579, sd = 0.40714))
B <- rnorm(n = 1, mean = 1.1060, sd = 0.3505)
TB <- rnorm(n = 1, mean = 1.0370, sd = 0.3483)
params$muB <- params$muS * exp(B)
params$muT <- params$muS * exp(TB)
params$muC <- params$muS * exp(B + TB)
params$muR <- params$muT
params$muRC <- params$muC
# think about runs with too high mortality!
val <- get_EE(params, x0, "beverton-holt")
data <- data.frame(
rhoB = params$rhoB,
dB = params$muB[1]/ params$muS[1],
dT = params$muT[1]/ params$muS[1],
EE_bTB_single = val[1],
EE_bTB_co = val[2],
EE_brucellosis_single = val[3],
EE_brucellosis_co = val[4])
}
stopCluster(cl)
d2
