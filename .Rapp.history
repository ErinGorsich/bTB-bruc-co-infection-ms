lambdaT <- params$betaTm %*% (It + Ic + Rc)
betaTm
betaTm <- matrix(c(rep(betaT, 400)), nrow = 20, ncol = 20)
betaTm
lambdaB
lambdaT
lambdaB <- betaBm %*% (It)
lambdaB
S <- c(rep(2, 20))
S
lambdaB * S
ages <- c(seq(1,20,by=1) # upper end of age classes#
da <- diff(c(0,ages))#
#
dim(betaB)#
filled.contour(betaBm,plot.title=title(main="WAIFW matrix"))#
s_index <- 1:20#
it_index <- 21:40#
ib_index <- 41:60#
ic_index <- 61:80#
r_index <- 81:100#
rc_index <- 101:120#
#(age= 1-3.9, 4-4.9, 5-14.9, 15+)..subsume calf mortality in births#
juveniles <- 1:3#
subadult<- 4#
adult <- 5:14#
mature <- 15:20#
#
aging <- diag(-1/da)#
aging[row(aging)- col(aging)==1] <- 1/head(da, -1)
aging
ages <- c(seq(1,20,by=1) # upper end of age classes#
da <- diff(c(0,ages))
aging <- diag(-1/da)#
aging[row(aging)- col(aging)==1] <- 1/head(da, -1)
ages <- c(seq(1,20,by=1)) # upper end of age classes
da <- diff(c(0,ages))
aging <- diag(-1/da)#
aging[row(aging)- col(aging)==1] <- 1/head(da, -1)
aging
ls()
params
##############################################################
##############################################################
rhs_age = function(times, x, params){#
	###########################
	# Inputs: t = time sequence; #
	# x = initial conditions, vector(length=24), 4 age categories#
	# params= list(#
	# b1,b2,b3,b4,b5: age sp. prop reduction in fecundity (20 long)#
	# with TB/bruc/chronic bruc/co/co-chronic #
	# betaT, betaB: transmission rates, age independent#
	# rhoB & rhoT: prop increase in transmission #
	# with co-infection (scalor=age independent)#
	# gamma, epsilon: scalors	 #
	# b = a vector (0, small no., birth rate set to get growth = 1.2, same rate)#
	# muS, muT, muB, muC, muR, muRC age specific mortality rates.  #
	# l = aging! = vector #
	###########################
	with(as.list(c(x, params)), {#
#
		# Assign state variables, each 20 long, #
		# 4 categories: 1-3.9, 4-4.9, 5-14.9, 15+)#
		# from incidence anlaysis, use [0-3),[3 +) #
		# from mortality analysis, use [0-3),[3 +)#
		# from birth analyis, use, [3-5),[5+)#
		S = x[s_index] 				#
		It = x[it_index] 			#
		Ib = x[ib_index]#
		Ic = x[ic_index]#
		R = x[r_index]#
		Rc = x[rc_index]#
#
		# Population size (N)#
		Nall <- sum(S + It + Ib + Ic + R + Rc)  # overall#
		N <- S + It + Ib +Ic + R + Rc 			# by age category#
#
		# Frequency dependent force of infection is age dependent #
		# turn betaB into a matrix#
		betaBm <- matrix(nrow = 20, ncol = 20)#
		betaBm[1:20, 1:20] <- betaB#
		betaBm[4:6,] <- exp(0.0885) * betaB  #4-6yr have higher suscept.#
		betaTm <- matrix(c(rep(betaT, 400)), nrow = 20, ncol = 20)#
		# lambdaB = age specific vectors!#
		lambdaT <- params$betaTm %*% (It + Ic + Rc) #
		lambdaB <- params$betaBm %*% (Ib + Ic) #
		lambdapT <- params$rhoT * params$betaTm %*% (It + Ic + Rc)#
		lambdapB <- params$rhoB * params$betaBm %*% (Ib + Ic) #
#
		# Age spcific pop contributing to births (Nb = vector); #
		# reduced births(b1, b2...=vectors; Nb = vector, birth = vector) #
		Nb <- S + params$b1 * It + params$b2 * Ib + #
			params$b3 * R + params$b4 * Ic + params$b5 * Rc#
		birth <- c(params$b %*% Nb, rep(0, 19))#
		dS <- b * Nb * (1 - (r/b) * (N/K) ) + aging %*% S#
			- (lambdaT + lambdaB) * S - muS * S#
		dIt <- lambdaT * S - (lambdapB + muT) * It + aging %*% It#
		dIb <- lambdaB * S + aging %*% Ib +#
			epsilon * R - (gamma + lambdapT + muB) * Ib#
		dIc <- lambdapT * Ib + lambdapB * It + aging %*% Ic +#
			epsilon * Rc - (gamma + muC) * Ic#
		dR <- gamma * Ib - (epsilon + muR + lambdapT) * R + aging %*% R#
		dRc <- lambdapT * R + gamma * Ic + aging %*% Rc -#
			(epsilon + muRC) * Rc#
		out = list(c(dS, dIt, dIb, dIc, dR, dRc))#
		return(out)	#
		}#
	)	#
}
##############################################################
# Mortality, susceptible females#
##############################################################
muS <- NA; muT <- NA; muB <- NA; muC <- NA#
muS[1:3]<- 1- 0.884 # mortality rate in yearlings [1-4) (1/yr)#
muS[4]<-  1- 0.963 # mortality rate in sub-adults [4-5)  (1/yr)#
muS[4:14]<-  1- 0.963 # mortality rate in adults 5+  (1/yr)#
muS[15:20]<-  1- 0.7 # mortality rate in adults 15+  (1/yr)#
# mortality, TB, and Brucellosis positive animals#
muT <- 2.82 * muS#
muB <- 3.02 * muS#
muC <- (2.82 + 3.02) * muS#
muC[15:20] <- 1  # because otherwise goes over#
muRC <- muC#
muR <- muB#
#
K = 1000#
# only consider female mortality... #
# Mortality in males is 2-8% higher than mortality in females. (?)#
#mum<- muS + 0.05
muS
length(muS)
muR
length(muR)
muC
b1 <- c(rep(1, 14), rep(0.65) 6)		# prop reduction in fec bTB (from raw data)
b1 <- c(rep(1, 14), rep(0.65, 6))		# prop reduction in fec bTB (from raw data)
b1
length(b1)
###############################################
###############################################
library(lme4)#
library(arm)#
library(ggplot2)#
library(MASS) #glmmpql#
library(MuMIn)#
#########################################################################
# Read in data, calculate approximation for calving, in calving period#
#########################################################################
data<- read.csv("~/Documents/postdoc_buffology/Last-Thesis-Chapter!!!!!!/final_datasets_copied_from_phdfolder/cross_sectional_data_withdz_cleandisease_nofinal_Feb2016_capturetime_forsurv.csv")#
data2<- data[data$herdorig=="LS",]#
calftime <- c(0, 12, 24, 36)#
data4<- data2[data2$capturetime %in% calftime,]#
data4$fec<- NA#
table(data4$milk , data4$calf)#
# With milk one 10 year old, two 12 year olds, no 9, 11, 0, or 1 yr olds (good)#
# one 11 year old without milk#
# called age <=10 yes#
# called 10 unknowns with milk yes; 3 unknowns with no/unknown milks no#
include = c( 10, 2, 3,4, 5, 6, 7, 8, 9, "yes")#
data4$fec[data4$calf %in% include] <- 1 #
data4$fec[data4$calf %in% c(11, 12, "no")] <- 0#
data4$fec[data4$calf=="unknown" & data4$milk=="yes"] <- 1#
data4$fec[data4$calf=="unknown" & data4$milk=="unknown"] <- 0#
data4$fec[data4$calf=="unknown" & data4$milk=="no"] <- 0#
#
# overall rates: #
table(data4$fec, data4$tb, data4$bruc)
length(data4[,1])
had(data4)
h3ad(data4)
head(data4)
length(data4[unique(data4$id)])
length(data4[unique(data4$id),])
table(data4$id)
d<- data4#
d$tb[d$tb==0] <- "negative"#
d$tb[d$tb==1] <- "positive"#
d$tb <- as.factor(d$tb)#
a<- data.frame(table(d$fec, d$tb, d$bruc,  d$age_yr)); colnames(a)<- c("Fec", "TB", "Brucellosis", "Age", "Freq")#
a$col <- c("blue4", "brown4", "dodgerblue", "brown1", "darkslategray3", "lightcoral", "lightskyblue", "mistyrose1")#
# preg= red, not= blue#
#
# make a stacked barplot#
make_stacked_barplot = function(age){#
	temp<- a[a$Age==age,]#
	temp$Brucellosis<- relevel(temp$Brucellosis, "negative")#
	temp$TB<- relevel(temp$TB, "negative")#
	a<- temp[with(temp, order(temp$Fec, temp$Brucellosis, temp$TB)),]#
	mat<- matrix(a$Freq, nrow=2, ncol=4, byrow=TRUE, #
	dimnames=list(c("no calf", "calf"), c("Uninfected", "TB+", "Brucellosis+", "Co-infected")))#
	prop <- prop.table(mat, margin=2)#
	par(mar=c(5.1, 4.1, 4.1, 7.1), xpd=TRUE)#
	barplot(mat, col=heat.colors(length(rownames(mat))), width=2, main=paste("Age= ", age), las=1, #
	ylab= "Number of buffalo")#
	legend("topright", fill=heat.colors(length(rownames(mat))), legend=rownames(mat),bty="n")#
}	#
#
#ages<- c(2, 3,4,5,6,7,8, 9, 10)#
ages<- c(4,5,6,7,8, 9)#
par(mfrow=c(2,3))#
for (age in ages){#
	make_stacked_barplot(age)#
}#
#
#########################################################################
#Choose age category that is most appropriate
#########################################################################
#Choose age category that is most appropriate#
#########################################################################
d<- data4[data4$age_yr > 3 & data4$age_yr <= 9,]#
d$age5 <- "adult"; #
d$age5[d$age_yr %in% c(4) ] <- "juvenile"#
d$age5[d$age_yr %in% c(8, 9) ] <- "mature"#
#
d$age6 <- "adult"; #
d$age6[d$age_yr %in% c(4, 5) ] <- "juvenile"#
d$age6[d$age_yr %in% c(8, 9) ] <- "mature"#
#
d$age1 <- "adult" #
d$age1[d$age_yr %in% c(4) ] <- "juvenile"#
#
d$age3 <- "adult" #
d$age3[d$age_yr %in% c(4, 5) ] <- "juvenile"#
#
d$age7<- "adult"#
d$age7[d$age_sel/12 < 5] <- "subadult"#
d$age7[d$age_sel/12 > 7] <- "mature"
t1<-glmmPQL(fec~ age1*bruc + tb*bruc + age1*tb, correlation= corAR1(form=~ capturetime |id), random= ~ 1|id, data=d, family=binomial); summary(t1)
t1<-glmer(fec~ age1*bruc + tb*bruc + age1*tb + (1|id), data=d, family=binomial); summary(t1)
b <- NA; b1 <- NA; b2<- NA; b3 <- NA; b4 <- NA; b5 <- NA#
b[1:3] <- 0		# [1-4)#
b[5:14] <- 0.56	# Birth rate in uninif age [5-15); raw data (14/25)#
b[4] <- max(b[5] * 0.15, 0)	# Birth rate in uninif age [4-5); raw data (2/26)#
b[4] <- max(b[3] * 0.7, 0)
b
length(b)
0.35/0.56
b <- NA; b1 <- NA; b2<- NA; b3 <- NA; b4 <- NA; b5 <- NA#
b[1:3] <- 0		# [1-4)#
b[5:14] <- 0.56	# Birth rate in uninif age [5-15); raw data (14/25)#
b[4] <- max(b[5] * 0.15, 0)	# Birth rate in uninif age [4-5); raw data (2/26)#
b[15:20] <- max(b[3] * 0.7, 0)
b
b[15:20] <- max(b[5] * 0.7, 0)	# Birth rate in uninif age 15 +; raw data (14/25)
b
0.37*0.73
0.56/2
b <- b/2
b
b*0.65
b1 <- c(rep(1, 4), rep(0.65, 20-4))	# prop reduction in fec bTB (from raw data)
b1
b4<- c(1, 1, 1, 1, rep(0.8, 20-4)) 		# prop reduction in fecundity if coinfected
b4*b
b1*b
b2*b
b2 <- c(1, 1, 1, 1, rep(0.68, 20-4))		# prop reduction with brucellosis
b2*b
##############################################################
# Age distribution information#
##############################################################
# Age distribution information (? expected values)#
#npop = 1000#
#f = c(0.08, 0.14, 0.31, 0.29, 0.18) # Age structure based on Northern herds in Caron et al. 2003 (low bTB prevalence)#
#N = npop * f#
#nu = c(1, 1/2, 1, 1, 0) # 1 / duration of time spent in each age category
rm(list = ls())
##############################################################
require("deSolve")#
library("plyr")#
library("ggplot2")#
set.seed(5)#
# get fixed.params & fixed.params.recov#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_norecovery_agematrix.R', chdir = TRUE)#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_recovery_agematrix.R', chdir = TRUE)#
# rhs function, determinitic model, age structure#
source('~/GitHub/bTB-bruc-co-infection-ms/rhs_age.R', chdir = TRUE)
yinit <- c(            S=c(rep(100,20),rep(0,5),rep(200,5)),            I=c(rep(0,25),1,rep(0,4)),            R=c(rep(0,20),rep(1000,5),rep(0,5))            )
yinit
relageall = c(0.137, rep(0.368/4, 4), rep(0.185/4, 4),  # Jolles 2007, set max age at 20#
	rep(0.235/6, 6), rep(0.075/3, 3))
relageall
length(relageall)
rep(0.235/6, 6), rep(0.075/5, 5))					# Also in Caron et al. from 2001 KNP
relageall = c(0.137, rep(0.368/4, 4), rep(0.185/4, 4),  # Jolles 2007, set max age at 20#
	rep(0.235/6, 6), rep(0.075/5, 5))
length(relageall)
relage = realageall
relageall = c(0.137, rep(0.368/4, 4), rep(0.185/4, 4),  # Jolles 2007, set max age at 20#
	rep(0.235/6, 6), rep(0.075/5, 5))					# Also in Caron et al. from 2001 KNP#
relage = realageall
relageall = c(0.137, rep(0.368/4, 4), rep(0.185/4, 4),  # Jolles 2007, set max age at 20#
	rep(0.235/6, 6), rep(0.075/5, 5))
relage = relageall
S0 = 500*relage; It0 = 0*relage; Ib0 = 0*relage; #
Ic0 = 0*relage; R0 = 0 * relage; Rc0 = 0 * relage#
x0 = c(S0, It0, Ib0, Ic0, R0, Rc0)#
times <- seq(0, 100, 1)#
params.test = c(fixed.params,list(gamma=1/2, betaB = c(0.001, 0.002, 0.001, 0.001), betaT = rep(0.002, 4), rhoT = 1.2, rhoB = 4))
params.test
rhs_age_matrix = function(times, x, params){#
	###########################
	# Inputs: t = time sequence; #
	# x = initial conditions, vector(length=24), 4 age categories#
	# params= list(#
	# b1,b2,b3,b4,b5: age sp. prop reduction in fecundity (20 long)#
	# with TB/bruc/chronic bruc/co/co-chronic #
	# betaT, betaB: transmission rates, age independent#
	# rhoB & rhoT: prop increase in transmission #
	# with co-infection (scalor=age independent)#
	# gamma, epsilon: scalors	 #
	# b = a vector (0, small no., birth rate set to get growth = 1.2, same rate)#
	# muS, muT, muB, muC, muR, muRC age specific mortality rates.  #
	###########################
	# Output: differences, for 20 ages#
	###########################
	with(as.list(c(x, params)), {#
#
		# Assign state variables, each 20 long, #
		# 4 categories: 1-3.9, 4-4.9, 5-14.9, 15+)#
		# from incidence anlaysis, use [0-3),[3 +) #
		# from mortality analysis, use [0-3),[3 +)#
		# from birth analyis, use, [3-5),[5+)#
		S = x[s_index] 				#
		It = x[it_index] 			#
		Ib = x[ib_index]#
		Ic = x[ic_index]#
		R = x[r_index]#
		Rc = x[rc_index]#
#
		# Population size (N)#
		Nall <- sum(S + It + Ib + Ic + R + Rc)  # overall#
		N <- S + It + Ib +Ic + R + Rc 			# by age category#
#
		# Frequency dependent force of infection is age dependent #
		# turn betaB into a matrix#
		betaBm <- matrix(nrow = 20, ncol = 20)#
		betaBm[1:20, 1:20] <- betaB#
		betaBm[4:6,] <- exp(0.0885) * betaB  #4-6yr have higher suscept.#
		betaTm <- matrix(c(rep(betaT, 400)), nrow = 20, ncol = 20)#
		# lambdaB = age specific vectors!#
		lambdaT <- params$betaTm %*% (It + Ic + Rc) #
		lambdaB <- params$betaBm %*% (Ib + Ic) #
		lambdapT <- params$rhoT * params$betaTm %*% (It + Ic + Rc)#
		lambdapB <- params$rhoB * params$betaBm %*% (Ib + Ic) #
#
		# Age spcific pop contributing to births (Nb = vector); #
		# reduced births(b1, b2...=vectors; Nb = vector, birth = vector) #
		Nb <- S + params$b1 * It + params$b2 * Ib + #
			params$b3 * R + params$b4 * Ic + params$b5 * Rc#
		birth <- c(params$b %*% Nb, rep(0, 19))#
		dS <- b * Nb * (1 - (N/K)) + aging %*% S#
			- (lambdaT + lambdaB) * S - muS * S#
		dIt <- lambdaT * S - (lambdapB + muT) * It + aging %*% It#
		dIb <- lambdaB * S + aging %*% Ib +#
			epsilon * R - (gamma + lambdapT + muB) * Ib#
		dIc <- lambdapT * Ib + lambdapB * It + aging %*% Ic +#
			epsilon * Rc - (gamma + muC) * Ic#
		dR <- gamma * Ib - (epsilon + muR + lambdapT) * R + aging %*% R#
		dRc <- lambdapT * R + gamma * Ic + aging %*% Rc -#
			(epsilon + muRC) * Rc#
		out = list(c(dS, dIt, dIb, dIc, dR, dRc))#
		return(out)	#
		}#
	)	#
}
sol <- as.data.frame(ode(x0, times, rhs_age_matrix, params.test))
rhs_age_matrix = function(times, x, params){#
	###########################
	# Inputs: t = time sequence; #
	# x = initial conditions, vector(length=24), 4 age categories#
	# params= list(#
	# b1,b2,b3,b4,b5: age sp. prop reduction in fecundity (20 long)#
	# with TB/bruc/chronic bruc/co/co-chronic #
	# betaT, betaB: transmission rates, age independent#
	# rhoB & rhoT: prop increase in transmission #
	# with co-infection (scalor=age independent)#
	# gamma, epsilon: scalors	 #
	# b = a vector (0, small no., birth rate set to get growth = 1.2, same rate)#
	# muS, muT, muB, muC, muR, muRC age specific mortality rates.  #
	###########################
	# Output: differences, for 20 ages#
	###########################
	with(as.list(c(x, params)), {#
#
		# Assign state variables, each 20 long, #
		# 4 categories: 1-3.9, 4-4.9, 5-14.9, 15+)#
		# from incidence anlaysis, use [0-3),[3 +) #
		# from mortality analysis, use [0-3),[3 +)#
		# from birth analyis, use, [3-5),[5+)#
		s_index <- 1:20#
		it_index <- 21:40#
		ib_index <- 41:60#
		ic_index <- 61:80#
		r_index <- 81:100#
		rc_index <- 101:120#
#
		S = x[s_index] 				#
		It = x[it_index] 			#
		Ib = x[ib_index]#
		Ic = x[ic_index]#
		R = x[r_index]#
		Rc = x[rc_index]#
#
		# Population size (N)#
		Nall <- sum(S + It + Ib + Ic + R + Rc)  # overall#
		N <- S + It + Ib +Ic + R + Rc 			# by age category#
#
		# Frequency dependent force of infection is age dependent #
		# turn betaB into a matrix#
		betaBm <- matrix(nrow = 20, ncol = 20)#
		betaBm[1:20, 1:20] <- betaB#
		betaBm[4:6,] <- exp(0.0885) * betaB  #4-6yr have higher suscept.#
		betaTm <- matrix(c(rep(betaT, 400)), nrow = 20, ncol = 20)#
		# lambdaB = age specific vectors!#
		lambdaT <- params$betaTm %*% (It + Ic + Rc) #
		lambdaB <- params$betaBm %*% (Ib + Ic) #
		lambdapT <- params$rhoT * params$betaTm %*% (It + Ic + Rc)#
		lambdapB <- params$rhoB * params$betaBm %*% (Ib + Ic) #
#
		# Age spcific pop contributing to births (Nb = vector); #
		# reduced births(b1, b2...=vectors; Nb = vector, birth = vector) #
		Nb <- S + params$b1 * It + params$b2 * Ib + #
			params$b3 * R + params$b4 * Ic + params$b5 * Rc#
		birth <- c(params$b %*% Nb, rep(0, 19))#
		dS <- b * Nb * (1 - (N/K)) + aging %*% S#
			- (lambdaT + lambdaB) * S - muS * S#
		dIt <- lambdaT * S - (lambdapB + muT) * It + aging %*% It#
		dIb <- lambdaB * S + aging %*% Ib +#
			epsilon * R - (gamma + lambdapT + muB) * Ib#
		dIc <- lambdapT * Ib + lambdapB * It + aging %*% Ic +#
			epsilon * Rc - (gamma + muC) * Ic#
		dR <- gamma * Ib - (epsilon + muR + lambdapT) * R + aging %*% R#
		dRc <- lambdapT * R + gamma * Ic + aging %*% Rc -#
			(epsilon + muRC) * Rc#
		out = list(c(dS, dIt, dIb, dIc, dR, dRc))#
		return(out)	#
		}#
	)	#
}
sol <- as.data.frame(ode(x0, times, rhs_age_matrix, params.test))
##############################################################
rhs_age_matrix = function(times, x, params){#
	###########################
	# Inputs: t = time sequence; #
	# x = initial conditions, vector(length=24), 4 age categories#
	# params= list(#
	# b1,b2,b3,b4,b5: age sp. prop reduction in fecundity (20 long)#
	# with TB/bruc/chronic bruc/co/co-chronic #
	# betaT, betaB: transmission rates, age independent#
	# rhoB & rhoT: prop increase in transmission #
	# with co-infection (scalor=age independent)#
	# gamma, epsilon: scalors	 #
	# b = a vector (0, small no., birth rate set to get growth = 1.2, same rate)#
	# muS, muT, muB, muC, muR, muRC age specific mortality rates.  #
	###########################
	# Output: differences, for 20 ages#
	###########################
	with(as.list(c(x, params)), {#
#
		# Assign state variables, each 20 long, #
		# 4 categories: 1-3.9, 4-4.9, 5-14.9, 15+)#
		# from incidence anlaysis, use [0-3),[3 +) #
		# from mortality analysis, use [0-3),[3 +)#
		# from birth analyis, use, [3-5),[5+)#
		s_index <- 1:20#
		it_index <- 21:40#
		ib_index <- 41:60#
		ic_index <- 61:80#
		r_index <- 81:100#
		rc_index <- 101:120#
#
		S = x[s_index] 				#
		It = x[it_index] 			#
		Ib = x[ib_index]#
		Ic = x[ic_index]#
		R = x[r_index]#
		Rc = x[rc_index]#
#
		# Population size (N)#
		Nall <- sum(S + It + Ib + Ic + R + Rc)  # overall#
		N <- S + It + Ib +Ic + R + Rc 			# by age category#
#
		# Frequency dependent force of infection is age dependent #
		# turn betaB into a matrix#
		betaBm <- matrix(nrow = 20, ncol = 20)#
		betaBm[1:20, 1:20] <- betaB#
		betaBm[4:6,] <- exp(0.0885) * betaB  #4-6yr have higher suscept.#
		betaTm <- matrix(c(rep(betaT, 400)), nrow = 20, ncol = 20)#
		# lambdaB = age specific vectors!#
		lambdaT <- betaTm %*% (It + Ic + Rc) #
		lambdaB <- betaBm %*% (Ib + Ic) #
		lambdapT <- rhoT * betaTm %*% (It + Ic + Rc)#
		lambdapB <- rhoB * betaBm %*% (Ib + Ic) #
#
		# Age spcific pop contributing to births (Nb = vector); #
		# reduced births(b1, b2...=vectors; Nb = vector, birth = vector) #
		Nb <- S + b1 * It + b2 * Ib + #
			b3 * R + b4 * Ic + b5 * Rc#
		birth <- c(b %*% Nb, rep(0, 19))#
		dS <- b * Nb * (1 - (N/K)) + aging %*% S#
			- (lambdaT + lambdaB) * S - muS * S#
		dIt <- lambdaT * S - (lambdapB + muT) * It + aging %*% It#
		dIb <- lambdaB * S + aging %*% Ib +#
			epsilon * R - (gamma + lambdapT + muB) * Ib#
		dIc <- lambdapT * Ib + lambdapB * It + aging %*% Ic +#
			epsilon * Rc - (gamma + muC) * Ic#
		dR <- gamma * Ib - (epsilon + muR + lambdapT) * R + aging %*% R#
		dRc <- lambdapT * R + gamma * Ic + aging %*% Rc -#
			(epsilon + muRC) * Rc#
		out = list(c(dS, dIt, dIb, dIc, dR, dRc))#
		return(out)	#
		}#
	)	#
}
sol <- as.data.frame(ode(x0, times, rhs_age_matrix, params.test))
sol.recov<- as.data.frame(ode(x0, times, rhs_age_matrix, params.test.recov))
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_recovery_agematrix.R', chdir = TRUE)
ls()
##############################################################
S0 = 500*relage; It0 = 0*relage; Ib0 = 0*relage; #
Ic0 = 0*relage; R0 = 0 * relage; Rc0 = 0 * relage#
x0 = c(S0, It0, Ib0, Ic0, R0, Rc0)#
times <- seq(0, 100, 1)#
params.test = c(fixed.params, list(gamma=1/2, betaB = 0.001,#
	betaT = 0.001, rhoT = 1.2, rhoB = 4))#
params.test.recov = c(fixed.params.recov, list(gamma=1/2, #
	betaB = 0.001, betaT = 0.001, rhoT = 1.2, rhoB = 4))#
#
sol <- as.data.frame(ode(x0, times, rhs_age_matrix, params.test))#
sol.recov<- as.data.frame(ode(x0, times, rhs_age_matrix, params.test.recov))#
#
par(mfrow(1,2))#
plot(x = sol$time, y = (sol[,2] + sol[,3] + sol[,4] + sol[,5]), #
	pch = 19, main = "Density Independent")#
plot(x = soldd$time, y = (soldd[,2] + soldd[,3] + soldd[,4] + soldd[,5]), #
	pch = 19, main = "Density Dependent")#
(sol[99,2] + sol[99,3] + sol[99,4] + sol[99,5])/(sol[98,2] + sol[98,3] + sol[98,4] + sol[98,5])
tail(sol)
S0 = 500*relage; It0 = 0*relage; Ib0 = 0*relage; #
Ic0 = 0*relage; R0 = 0 * relage; Rc0 = 0 * relage#
x0 = c(S0, It0, Ib0, Ic0, R0, Rc0)#
times <- seq(0, 100, 1)
params.test = c(fixed.params, list(gamma=1/2, betaB = 0.001,#
	betaT = 0.001, rhoT = 1.2, rhoB = 4))#
params.test.recov = c(fixed.params.recov, list(gamma=1/2, #
	betaB = 0.001, betaT = 0.001, rhoT = 1.2, rhoB = 4))
x0
par(mfrow = c(1,2))#
plot(x = sol$time, y = sum(sol[,2:length(x0)]), #
	pch = 19, main = "Density Dependent, no Recovery")#
plot(x = sol.recov$time, y = sum(sol.recov[,2:length(x0)]), #
	pch = 19, main = "Density Dependent, no Recovery")
head(sol)
plot(x = sol.recov$time, y = sum(sol.recov[,2:120]),
pch = 19, main = "Density Dependent, no Recovery")
length(sol.recov$time)
length(sol.recov$1)
head(sol.recov)
head(sol.recov[,2])
head(sum(sol.recov[,c(2:120)]))
apply(sol.recov[c(2:120)], sum)
?apply
apply(sol.recov[c(2:120)], 1, sum)
par(mfrow = c(1,2))#
plot(x = sol$time, y = apply(sol[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")#
plot(x = sol.recov$time, y = apply(sol.recov[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")
tail(sol)
b
require("deSolve")#
library("plyr")#
library("ggplot2")#
set.seed(5)#
# get fixed.params & fixed.params.recov#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_norecovery_agematrix.R', chdir = TRUE)#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_recovery_agematrix.R', chdir = TRUE)#
# rhs function, determinitic model, age structure#
source('~/GitHub/bTB-bruc-co-infection-ms/rhs_age.R', chdir = TRUE)#
##############################################################
##############################################################
#2) Set-up features of aging#
##############################################################
##############################################################
#(age= 1-3.9, 4-4.9, 5-14.9, 15+)..subsume calf mortality in births#
s_index <- 1:20#
it_index <- 21:40#
ib_index <- 41:60#
ic_index <- 61:80#
r_index <- 81:100#
rc_index <- 101:120#
juveniles <- 1:3#
subadult<- 4#
adult <- 5:14#
mature <- 15:20#
#
# Age structure information, used to calculate mortality rates in susceptibles. #
relageall = c(0.137, rep(0.368/4, 4), rep(0.185/4, 4),  # Jolles 2007, set max age at 20#
	rep(0.235/6, 6), rep(0.075/5, 5))					# Also in Caron et al. from 2001 KNP#
relage = relageall#
##############################################################
##############################################################
#2) Test plots and grooming functions#
##############################################################
##############################################################
# Test plots, No Disease#
##############################################################
S0 = 500*relage; It0 = 0*relage; Ib0 = 0*relage; #
Ic0 = 0*relage; R0 = 0 * relage; Rc0 = 0 * relage#
x0 = c(S0, It0, Ib0, Ic0, R0, Rc0)#
times <- seq(0, 100, 1)#
params.test = c(fixed.params, list(gamma=1/2, betaB = 0.001,#
	betaT = 0.001, rhoT = 1.2, rhoB = 4))#
params.test.recov = c(fixed.params.recov, list(gamma=1/2, #
	betaB = 0.001, betaT = 0.001, rhoT = 1.2, rhoB = 4))#
#
sol <- as.data.frame(ode(x0, times, rhs_age_matrix, params.test))#
sol.recov<- as.data.frame(ode(x0, times, rhs_age_matrix, params.test.recov))#
#
par(mfrow = c(1,2))#
plot(x = sol$time, y = apply(sol[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")#
plot(x = sol.recov$time, y = apply(sol.recov[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")
##############################################################
##############################################################
#1) Load fixed parameters, model#
##############################################################
##############################################################
require("deSolve")#
library("plyr")#
library("ggplot2")#
set.seed(5)#
# get fixed.params & fixed.params.recov#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_norecovery_agematrix.R', chdir = TRUE)#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_recovery_agematrix.R', chdir = TRUE)#
# rhs function, determinitic model, age structure#
source('~/GitHub/bTB-bruc-co-infection-ms/rhs_age.R', chdir = TRUE)#
##############################################################
##############################################################
#2) Set-up features of aging#
##############################################################
##############################################################
#(age= 1-3.9, 4-4.9, 5-14.9, 15+)..subsume calf mortality in births#
s_index <- 1:20#
it_index <- 21:40#
ib_index <- 41:60#
ic_index <- 61:80#
r_index <- 81:100#
rc_index <- 101:120#
juveniles <- 1:3#
subadult<- 4#
adult <- 5:14#
mature <- 15:20#
#
# Age structure information, used to calculate mortality rates in susceptibles. #
relageall = c(0.137, rep(0.368/4, 4), rep(0.185/4, 4),  # Jolles 2007, set max age at 20#
	rep(0.235/6, 6), rep(0.075/5, 5))					# Also in Caron et al. from 2001 KNP#
relage = relageall#
##############################################################
##############################################################
#2) Test plots and grooming functions#
##############################################################
##############################################################
# Test plots, No Disease#
##############################################################
S0 = 500*relage; It0 = 0*relage; Ib0 = 0*relage; #
Ic0 = 0*relage; R0 = 0 * relage; Rc0 = 0 * relage#
x0 = c(S0, It0, Ib0, Ic0, R0, Rc0)#
times <- seq(0, 100, 1)#
params.test = c(fixed.params, list(gamma=1/2, betaB = 0.001,#
	betaT = 0.001, rhoT = 1.2, rhoB = 4))#
params.test.recov = c(fixed.params.recov, list(gamma=1/2, #
	betaB = 0.001, betaT = 0.001, rhoT = 1.2, rhoB = 4))
params.test
sol <- as.data.frame(ode(x0, times, rhs_age_matrix, params.test))#
sol.recov<- as.data.frame(ode(x0, times, rhs_age_matrix, params.test.recov))#
#
par(mfrow = c(1,2))#
plot(x = sol$time, y = apply(sol[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")#
plot(x = sol.recov$time, y = apply(sol.recov[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")
K
tail(sol)
plot_raw_numbers_mat = function(sol){#
	plot(sol$time, apply(sol$S[s_index], 1, sum), col= "black",#
		type= 'l', ylim = c(0, 1200), ylab = "Number of animals", #
		xlab = "Time (in years)")#
	lines(sol$time, apply(sol[it_index], 1, sum), col= "red")#
	lines(sol$time, apply(sol[ib_index], 1, sum), col= "blue")#
	lines(sol$time, apply(sol[ic_index], 1, sum), col= "green")#
	lines(sol$time, apply(sol[r_index], 1, sum) col = "orange")#
	lines(sol$time, apply(sol[rc_index], 1, sum) col = "pink")#
	legend("topright", legend = c("S", "It", "Ib", "Ic", "R", "Rc"),#
		col = c("black", "red", "blue", "green", "orange", "pink"), #
		bty="n", lty = 1)#
}
plot_raw_numbers_mat = function(sol){#
	plot(sol$time, apply(sol$S[s_index], 1, sum), col= "black",#
		type= 'l', ylim = c(0, 1200), ylab = "Number of animals", #
		xlab = "Time (in years)")#
	lines(sol$time, apply(sol[it_index], 1, sum), col= "red")#
	lines(sol$time, apply(sol[ib_index], 1, sum), col= "blue")#
	lines(sol$time, apply(sol[ic_index], 1, sum), col= "green")#
	lines(sol$time, apply(sol[r_index], 1, sum), col = "orange")#
	lines(sol$time, apply(sol[rc_index], 1, sum), col = "pink")#
	legend("topright", legend = c("S", "It", "Ib", "Ic", "R", "Rc"),#
		col = c("black", "red", "blue", "green", "orange", "pink"), #
		bty="n", lty = 1)#
}
s_index
ln(2)
log(2)
f = function(b, x){}
f = function(b, x){#
	1 * exp(-b * x)#
}#
#
500* f(0.2, 100)#
500* f(0.2, 500)#
500* f(0.2, 1000)
500* f(1/100, 300)#
500* f(1/500, 300)#
500* f(1/1000, 300)#
#
500* f(1/100, 500)#
500* f(1/500, 500)#
500* f(1/1000, 500)
300* f(1/100, 300)#
300* f(1/500, 300)#
300* f(1/1000, 300)
# Age structure information, used to calculate mortality rates in susceptibles. #
relageall = c(0.137, rep(0.368/4, 4), rep(0.185/4, 4),  # Jolles 2007, set max age at 20#
	rep(0.235/6, 6), rep(0.075/5, 5))					# Also in Caron et al. from 2001 KNP
relage = relageall
relage
require("deSolve")#
library("plyr")#
library("ggplot2")#
set.seed(5)#
# get fixed.params & fixed.params.recov#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_norecovery_agematrix.R', chdir = TRUE)#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_recovery_agematrix.R', chdir = TRUE)#
# rhs function, determinitic model, age structure#
source('~/GitHub/bTB-bruc-co-infection-ms/rhs_age.R', chdir = TRUE)
ls()
fixed.params
# Make figure summarizing parameters for Culex pipiens. #
#
# x pannel plot#
# Row 1: Juvenile mortality rates; #
#		 Larval density dependence;#
#		 Juvenile development rate; #
#		 with conceptual arrow:  Translation to Survival through Juvenile stage #
# Row 2: Adult mortality rates; #
# 		 Gonotrophic development rate#
# 		 Egg something or another rate#
#		 with conceptual arrow:  Translation to Survival through Juvenile stage #
# Row 3: Bite rate/vector competence figures, and label saying fixed for initial exploration#
#
##############################################################################
##############################################################################
# Data for figures#
##############################################################################
##############################################################################
# Development rates from Ruybal et al. 2016 & Loetti et al. 2011#
Culex_pipiens_juvenile_dev_data = data.frame(  # Ruybal et al. 2016#
	temp = c(rep(c(16, 20, 24, 27, 31), 3), 10, 15, 20, 25, 30), #
	rate = c(1/22.4, 1/14.2, 1/10.9, 1/10.7, 1/9.4, #
			1/21.3, 1/13.7, 1/10.2, 1/8.8, 1/8.3, #
			1/20.5, 1/13.1, 1/9.88, 1/8.9, 1/8.23, #
			1/39.8, 1/21.6, 1/13.3, 1/10.2, 1/8),#
	strain = c(rep("midlow", 5), rep("midhigh", 5), rep("low", 5), rep("Lotti", 5)) #
)#
# Mortality data also from Ruybal et al. 2016#
Culex_pipiens_juvenile_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )	#
# Adult mortality data form Ruybal et al. 2016 & Ciota et al. 2014#
Culex_pipiens_adultmort_data1 = data.frame(  # Ruybal et al. 2016.  #
#GUESS- ESTIMATED- NOT GRAPH CLICK!!!!!!!!#
	temp = c(rep( c(16, 20, 24, 27, 31, 35), 3)), #
	rate = c( 1-0.995, 1-0.993, 1-0.99, 1-0.97, 1-0.8, 1-0.3, # dark gray #
		1-0.995, 1-0.993, 1-0.992, 1-0.975, 1-0.8, 1-0.18, # light gray#
		1-0.995, 1-0.992, 1-0.985, 1-0.96, 1-0.80, 1-0.4))		#
Culex_pipiens_adultmort_data2 = data.frame(  # Ciota et al. 2014#
	temp = c(16, 16, 20, 20, 24, 24, 28, 28, 32, 32),#
	rate = c(1/87, 1/72, 1/68, 1/43, 1/31, 1/26, 1/7.5, 1/19.3, 1/23.7, 1/2.9))#
Culex_pipiens_adult_mort_data = data.frame(#
	temp = c(Culex_pipiens_adultmort_data1$temp, Culex_pipiens_adultmort_data2$temp ), #
	rate = c(Culex_pipiens_adultmort_data1$rate, Culex_pipiens_adultmort_data2$rate))#
#
##############################################################################
##############################################################################
# Functions to make lines with best fit parameters#
##############################################################################
##############################################################################
# Functions to translate parameters to figures#
val <- NA#
t<-seq(10, 40, 0.25)#
get_juvenile_development_line = function(t, params){#
	alpha <- params[1]#
	beta <- params[2]#
	for(i in 1:length(t)){#
		val[i] <- devrate(alpha= alpha, beta = beta, t[i])#
	}#
	return(val)#
}		#
#
get_juvenile_mortality_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=6, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
##############################################################################
##############################################################################
# Plots#
##############################################################################
##############################################################################
plot(y = Culex_pipiens_juvenile_mort_data$rate,#
	x = Culex_pipiens_juvenile_mort_data$temp, #
	pch = 19, col= 1, main = "Culex pipiens", #
	xlim = c(10, 35), ylim = c(0, 1), xlab = "Temperature (C)", #
	ylab = "Adult mortality rate (1/days)")#
params_juvenile_mort <- c(mu3 = 0.005, mu4 = 20.737, mu5 = 8.016)#
#
plot(y = Culex_pipiens_adult_mort_data$rate,#
	x = Culex_pipiens_adultmort_data$temp, #
	pch = 19, col= 1, main = "Culex pipiens", #
	xlim = c(10, 35), ylim = c(0, 1), xlab = "Temperature (C)", #
	ylab = "Adult mortality rate (1/days)")#
params_adult_mort <- c(mu3 = 0.02, mu4 = 22, mu5 = 9)  # fix these- they are made up!
##############################################################################
plot(y = Culex_pipiens_juvenile_mort_data$rate,#
	x = Culex_pipiens_juvenile_mort_data$temp, #
	pch = 19, col= 1, main = "Culex pipiens", #
	xlim = c(10, 35), ylim = c(0, 1), xlab = "Temperature (C)", #
	ylab = "Adult mortality rate (1/days)")#
params_juvenile_mort <- c(mu3 = 0.005, mu4 = 20.737, mu5 = 8.016)
##############################################################################
##############################################################################
##############################################################################
# CODE TO PLOT DEVELOPMENT  FUNCTIONS#
# ESTIMATE PARAMETERS FROM DATA#
##############################################################################
##############################################################################
##############################################################################
##############################################################################
# OUTLINE#
## 1) Explore Juvenile Development Rates h(t)#
## 2) Fit Baseline Juveinle Development Rates, h(t), without treatments to data#
## 3) Fit Parameters describing treatments to development rate data (NOT FINISHED)#
## 4) Fit Baseline Adult Development Rates#
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
1) Explore Juvenile Development Rates h(t) #
##############################################################################
##############################################################################
devrate = function(alpha, beta, t){#
	h = alpha * (t^beta)#
	return(h)#
}#
#
# Plot alpha#
##############################################################################
out<-NA; out1<-NA; out2<-NA; out3<-NA; out4<-NA#
temp<-seq(15, 35, 0.25)#
for(i in 1:length(temp)){#
	out[i]<-devrate(alpha= 0.000087, beta =1.726, t=temp[i])#
	out1[i]<-devrate(alpha =0.000187, beta = 1.726, t=temp[i])#
	out2[i]<-devrate(alpha = 0.000287, beta = 1.726, t=temp[i])  #### alpha used in model#
	out3[i]<-devrate(alpha = 0.000387, beta = 1.726, t=temp[i])#
	out4[i]<-devrate(alpha = 0.000487, beta = 1.726, t=temp[i]) #
}#
par(mfrow= c(1,2))#
plot(x=temp, y=out, ylim=c(0, 0.6), ylab="Development rate (1/day)", xlab="Temperature", main="Increasing alpha shifts base rate up", pch=19, cex=0.5, 	col="black")#
points(x=temp, y=out1, pch=19, cex=0.5, col="slateblue4")#
points(x=temp, y=out2, pch=19, cex=0.5, col="slateblue1")#
points(x=temp, y=out3, pch=19, cex=0.5, col="skyblue3")#
points(x=temp, y=out4, pch=19, cex=0.5, col="skyblue1")#
legend("topleft", legend=c("alpha= 0.000087", "alpha= 0.000187", "alpha= 0.000187", "alpha= 0.000287*", "alpha= 0.000387"), fill=c("slateblue4", "slateblue1", "black", "skyblue3", "skyblue1"), bty = "n")#
#
# Stage duration = mean of exponential distribution with rate = 1/rate = time until emergence (data)#
plot(x=temp, y=1/out, ylim = c(0, 110), ylab= "Time until emergence (days)", xlab= "Temperature", main= "Time to emergence down", pch=19, cex=0.5, 	col="black") #
points(x=temp, y=1/out1, pch=19, cex=0.5, col="slateblue4")#
points(x=temp, y=1/out2, pch=19, cex=0.5, col="slateblue1")#
points(x=temp, y=1/out3, pch=19, cex=0.5, col="skyblue3")#
points(x=temp, y=1/out4, pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("alpha= 0.000087", "alpha= 0.000187", "alpha= 0.000187", "alpha= 0.000287*", "alpha= 0.000387"), fill=c("slateblue4", "slateblue1", "black", "skyblue3", "skyblue1"), bty = "n")#
#
# Plot beta#
##############################################################################
out<-NA; out1<-NA; out2<-NA; out3<-NA; out4<-NA#
temp<-seq(15, 35, 0.25)#
for(i in 1:length(temp)){#
	out[i]<-devrate(alpha= 0.000287, beta =1, t=temp[i])#
	out1[i]<-devrate(alpha = 0.000287, beta = 1.4, t=temp[i])#
	out2[i]<-devrate(alpha = 0.000287, beta = 1.726, t=temp[i]) #
	out3[i]<-devrate(alpha = 0.000287, beta = 2.1, t=temp[i])#
	out4[i]<-devrate(alpha = 0.000287, beta = 2.5, t=temp[i]) #
}#
#
par(mfrow = c(1,2))#
plot(x=temp, y=out, ylim=c(0, 0.6), ylab="Development rate", xlab="Temperature", main="beta increases slope", pch=19, cex=0.5, 	col="black")#
points(x=temp, y=out1, pch=19, cex=0.5, col="slateblue4")#
points(x=temp, y=out2, pch=19, cex=0.5, col="slateblue1")#
points(x=temp, y=out3, pch=19, cex=0.5, col="skyblue3")#
points(x=temp, y=out4, pch=19, cex=0.5, col="skyblue1")#
#
# Stage duration = mean of exponential distribution with rate = 1/rate = time until emergence (data)#
plot(x=temp, y=1/out, ylim = c(0, 250), ylab= "Time until emergence (days)", xlab= "Temperature", main= "(power law)", pch=19, cex=0.5, 	col="black") #
points(x=temp, y=1/out1, pch=19, cex=0.5, col= "slateblue4" )#
points(x=temp, y=1/out2, pch=19, cex=0.5, col = "slateblue1")#
points(x=temp, y=1/out3, pch=19, cex=0.5, col="skyblue3")#
points(x=temp, y=1/out4, pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("beta= 1", "beta = 1.4", "beta = 1.726*", "beta = 2.1", "beta = 2.5"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
#
##############################################################################
##############################################################################
#2)  Fit Baseline Development Rates, h(t), without treatments to data#
##############################################################################
##############################################################################
#
# Non-linear, ordinary least squares to fit base-line development rate. Assumes normally distributed errors.#
# IF have one datapoint per temperature (think about ML later for each individual!)#
##############################################################################
Culex_qui_dev_data = data.frame( # Reuda et al. 1990, days from first egg hatch to adult#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1/31.4, 1/12.1, 1/10.5, 1/7.07, 1/7.21, 1/7.08))#
Culex_eduardoi_dev_data = data.frame(  # Loetti et al. 2008, days from larvae 1 to adult#
	temp = c(7, 10, 15, 20, 25), #
	rate = c(1/78.2, 1/54, 1/21.3, 1/13.8, 1/9.8))#
Culex_hepperi_dev_data = data.frame(  # Loetti et al. 2008, median days from larvae 1 to adult#
	temp = c(15, 20, 25, 30), #
	rate = c(1/33, 1/19, 1/16, 1/15))#
#Culex_pipiens_dev_data = data.frame(  # Loetti et al. 2011, median days from larvae 1 to adult#
#	temp = c(10, 15, 20, 25, 30, 33), #
#	rate = c(1/39.8, 1/21.6, 1/13.3, 1/10.2, 1/8, 1/11.5))#
Culex_pipiens_dev_data = data.frame(  # Loetti et al. 2011, median days from larvae 1 to adult#
	temp = c(10, 15, 20, 25, 30), #
	rate = c(1/39.8, 1/21.6, 1/13.3, 1/10.2, 1/8))#
Culex_pipiens_dev_data2 = data.frame(  # Ruybal et al. 2016#
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(#
			# 1/22, 1/14.3, 1/10.6, 1/9.6, 1/9.5,  # excluding the high elev sites b/c low egg rafts?#
			1/22.4, 1/14.2, 1/10.9, 1/10.7, 1/9.4, #
			1/21.3, 1/13.7, 1/10.2, 1/8.8, 1/8.3, #
			1/20.5, 1/13.1, 1/9.88, 1/8.9, 1/8.23),#
	strain = c(rep("midlow", 5), rep("midhigh", 5), rep("low", 5))  #rep("high_elv", 4),#
)#
Culex_pipiens_dev_total = data.frame(  # Ruybal et al. 2016#
	temp = c(rep(c(16, 20, 24, 27, 31), 3), 10, 15, 20, 25, 30), #
	rate = c(1/22.4, 1/14.2, 1/10.9, 1/10.7, 1/9.4, #
			1/21.3, 1/13.7, 1/10.2, 1/8.8, 1/8.3, #
			1/20.5, 1/13.1, 1/9.88, 1/8.9, 1/8.23, #
			1/39.8, 1/21.6, 1/13.3, 1/10.2, 1/8),#
	strain = c(rep("midlow", 5), rep("midhigh", 5), rep("low", 5), rep("Lotti", 5)) #
)#
Aedes_aegypti_dev_data = data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1/55.3, 1/12.4, 1/11.7, 1/6.4, 1/6.9, 1/6.2))#
Aedes_albopictus_dev_data = data.frame( #
	# Alto & Bettinardi, only constant temp treatments; #
	# Delatte et al. 2009 (combined both datasets)#
	temp= c(20, 25, 30, 15, 20, 25, 30, 35), #
	rate = c(1/18.5,  1/11, 1/15, 1/35, 1/14.4, 1/10.4, 1/8.8, 1/12.3))#
#
Culex <- list(Culex_qui_dev_data, Culex_eduardoi_dev_data, Culex_hepperi_dev_data, Culex_pipiens_dev_data, Culex_pipiens_dev_data2, Culex_pipiens_dev_total)#
Aedes <- list(Aedes_aegypti_dev_data, Aedes_albopictus_dev_data)#
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(alpha= alpha, beta = beta)#
	# Returns: SSE, over all input temperatures & obs (data)#
	##################################################
	predicted <- devrate(alpha= params[1], beta =params[2], t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_dev_line = function(t, params){#
	alpha <- params[1]#
	beta <- params[2]#
	for(i in 1:length(t)){#
		val[i] <- devrate(alpha= alpha, beta = beta, t[i])#
	}#
	return(val)#
}#
#
get_fit_devrate = function (df){ #, species#
	# Input: 	data = dataframe with two columns (temp and rate)#
	# 			species = character experession for y axis#
	observed <- df$rate#
	temperature <- df$temp#
	out <- optim(c(0.001, 1), objective, observed = observed, temperature = temperature) #
	a <- out$par[1]; b <- out$par[2]; min <- out$value#
	return(c(alpha = a, beta = b, min = min))#
}#
#
get_fit_devrate2 = function (df){ #, species#
	# Input: 	data = dataframe with two columns (temp and rate)#
	# 			species = character experession for y axis#
	observed <- df$rate#
	temperature <- df$temp#
	out <- optim(c(0.001, 1.4), objective, observed = observed, temperature = temperature) #
	a <- out$par[1]; b <- out$par[2]; min <- out$value#
	return(c(alpha = a, beta = b, min = min))#
#
}#
get_fit_devrate3 = function (df){ #, species#
	# Input: 	data = dataframe with two columns (temp and rate)#
	# 			species = character experession for y axis#
	observed <- df$rate#
	temperature <- df$temp#
	out <- optim(c(0.002, 1.2), objective, observed = observed, temperature = temperature) #
	a <- out$par[1]; b <- out$par[2]; min <- out$value#
	return(c(alpha = a, beta = b, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Culex_pipiens_combined", "Aedes_aegypti", "Aedes_albopictus"), #
	#devrate_alpha = NA, devrate_beta = NA, min1 = NA, #
	devrate_alpha2 = NA, devrate_beta2 = NA, min2 = NA,#
	devrate_alpha3 = NA, devrate_beta3 = NA, min3 = NA)#
#
par(mfrow = c(2,3))#
for(i in 1:length(Culex)){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, pch = 19, col= i, main = df$species[i], #
		xlim = c(0, 30), ylim = c(0, 0.2), xlab = "Temperature (C)", ylab = "Development Rate (1/days)")#
	#params <- get_fit_devrate(Culex[[i]])#
	#lines(y = get_dev_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]])), x = seq(5, 35, 1) , col = i)#
	#df$devrate_alpha[i]  <- params[[1]]#
	#df$devrate_beta[i] <- params[[2]]#
	#df$min1[i] <- params[[3]]#
	params <- get_fit_devrate2(Culex[[i]])#
	df$devrate_alpha2[i]  <- params[[1]]#
	df$devrate_beta2[i] <- params[[2]]#
	df$min2[i] <- params[[3]]#
	lines(y = get_dev_line(t= seq(5, 35, 1), params = c(params[[1]], #
		params[[2]])), x = seq(5, 35, 1) , col = i, lty = 2)#
	params <- get_fit_devrate3(Culex[[i]])#
	df$devrate_alpha3[i]  <- params[[1]]#
	df$devrate_beta3[i] <- params[[2]]#
	df$min3[i] <- params[[3]]#
	lines(y = get_dev_line(t= seq(5, 35, 1), params = c(params[[1]], #
		params[[2]])), x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("High: a2 = ", round(df$devrate_alpha2[i], 3),#
		" b2 = ", round(df$devrate_beta2[i], 3), sep = ""), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("Low: a3 = ", round(df$devrate_alpha3[i], 3), #
		" b3 = ", round(df$devrate_beta3[i], 3), sep = ""), cex = 0.7)#
	rm(params) #
}#
legend("topleft", legend = c("high slope initial conditions", "low slope initial conditions"), #
	lty = c(2,3), col = c("black", "black"), bty = "n")#
#
par(mfrow = c(1,2))#
for(i in 1:length(Aedes)){#
	plot(y = Aedes[[i]]$rate, x = Aedes[[i]]$temp, pch = 19, col= i, #
		main = df$species[i+6], xlim = c(0, 30), ylim = c(0, 0.2), #
		xlab = "Temperature (C)", ylab = "Development Rate (1/days)")#
		params <- get_fit_devrate2(Aedes[[i]])#
	df$devrate_alpha2[i+6]  <- params[[1]]#
	df$devrate_beta2[i+6] <- params[[2]]#
	df$min2[i+6] <- params[[3]]#
	lines(y = get_dev_line(t= seq(5, 35, 1), params = c(params[[1]], #
		params[[2]])), x = seq(5, 35, 1) , col = i, lty = 2)#
	params <- get_fit_devrate3(Aedes[[i]])#
	df$devrate_alpha3[i+6]  <- params[[1]]#
	df$devrate_beta3[i+6] <- params[[2]]#
	df$min3[i] <- params[[3]]#
	lines(y = get_dev_line(t= seq(5, 35, 1), params = c(params[[1]], #
		params[[2]])), x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("High: a2 = ", round(df$devrate_alpha2[i+6], 3),#
		" b2 = ", round(df$devrate_beta2[i+6], 3), sep = ""), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("Low: a3 = ", round(df$devrate_alpha3[i+6], 3), #
		" b3 = ", round(df$devrate_beta3[i+6], 3), sep = ""), cex = 0.7)#
	rm(params) #
}
par(mfrow = c(2,3))#
for(i in 1:length(Culex)){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, pch = 19, col= i, main = df$species[i], #
		xlim = c(0, 30), ylim = c(0, 0.2), xlab = "Temperature (C)", ylab = "Development Rate (1/days)")#
	#params <- get_fit_devrate(Culex[[i]])#
	#lines(y = get_dev_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]])), x = seq(5, 35, 1) , col = i)#
	#df$devrate_alpha[i]  <- params[[1]]#
	#df$devrate_beta[i] <- params[[2]]#
	#df$min1[i] <- params[[3]]#
	params <- get_fit_devrate2(Culex[[i]])#
	df$devrate_alpha2[i]  <- params[[1]]#
	df$devrate_beta2[i] <- params[[2]]#
	df$min2[i] <- params[[3]]#
	lines(y = get_dev_line(t= seq(5, 35, 1), params = c(params[[1]], #
		params[[2]])), x = seq(5, 35, 1) , col = i, lty = 2)#
	params <- get_fit_devrate3(Culex[[i]])#
	df$devrate_alpha3[i]  <- params[[1]]#
	df$devrate_beta3[i] <- params[[2]]#
	df$min3[i] <- params[[3]]#
	lines(y = get_dev_line(t= seq(5, 35, 1), params = c(params[[1]], #
		params[[2]])), x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("High: a2 = ", round(df$devrate_alpha2[i], 3),#
		" b2 = ", round(df$devrate_beta2[i], 3), sep = ""), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("Low: a3 = ", round(df$devrate_alpha3[i], 3), #
		" b3 = ", round(df$devrate_beta3[i], 3), sep = ""), cex = 0.7)#
	rm(params) #
}#
legend("topleft", legend = c("high slope initial conditions", "low slope initial conditions"), #
	lty = c(2,3), col = c("black", "black"), bty = "n")
0.4/13
##############################################################################
##############################################################################
# OUTLINE#
## 1) Explore Mortality Rates delta (t)#
## 2) Fit Baseline Mortality Rates, delta(t), without treatments to data#
## 3) Fit Baseline Adult Mortality rates, without treatments to data#
#
## 4) Fit Parameters describing treatments to mortality rate data#
##############################################################################
##############################################################################
##############################################################################
#
##############################################################################
##############################################################################
#1) Explore Mortality Rates (delta(t)) #
##############################################################################
##############################################################################
mortrate= function(gamma, mu3, mu4, mu5, t){#
	v<-((t-mu4)/mu5)^2#
	m<-gamma*mu3*exp(v)#
	return(m)#
}#
# in text for pupal stage: gamma=6 ; mu3=0.02; mu4=23 mu5= 6.5 #
#
# Explore mu3#
##############################################################################
out<-NA; out1<-NA; out2<-NA; out3<-NA; out4<-NA#
temp<-seq(15, 35, 0.25)#
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3=0.001, mu4=23, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.01, mu4=23, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.04, mu4=23, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.06, mu4=23, mu5=6.5, t=temp[i])#
}#
# NEED TO FIT WITH gamma = 1, becuase this re-creates lindsey's results!#
#
par(mfrow=c(1,3))#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu3 increases baseline mortality", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:75], y=out3[1:75], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:65], y=out4[1:65], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu3= 0.001", "mu3= 0.01", "mu3= 0.02", "mu3= 0.04", "mu3=0.06"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty ="n")#
#
#plot(x=out1, out2, xlim=c(0,1), ylim=c(0,1), xlab="mu3=0.1", ylab=" mu3=0.02", pch=19, main="dots represent mortality rates")
par(mfrow=c(1,3))#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu3 increases baseline mortality", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:75], y=out3[1:75], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:65], y=out4[1:65], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu3= 0.001", "mu3= 0.01", "mu3= 0.02", "mu3= 0.04", "mu3=0.06"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty ="n")#
#
#plot(x=out1, out2, xlim=c(0,1), ylim=c(0,1), xlab="mu3=0.1", ylab=" mu3=0.02", pch=19, main="dots represent mortality rates")#
#
# Explore mu4#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=19, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=21, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=25, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=27, mu5=6.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu4 shifts optimum temperature", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col = "slateblue1")#
points(x=temp[1:69], y=out3[1:69], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:80], y=out4[1:80], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu4= 19", "mu4= 21", "mu4= 23", "mu4= 25", "mu4=27"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
#
# Explore mu5#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=23, mu5=4.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=5.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=7.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=8.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="higher mu5 -> wider thermal range", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:66], y=out2[1:66], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:70], y=out3[1:70], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:75], y=out4[1:75], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu5= 4.5", "mu5= 5.5", "mu5= 6.5", "mu5= 7.5", "mu5=8.5"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")
par(mfrow=c(1,3))#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu3 increases baseline mortality", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:75], y=out3[1:75], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:65], y=out4[1:65], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu3= 0.001", "mu3= 0.01", "mu3= 0.02", "mu3= 0.04", "mu3=0.06"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty ="n")#
#
#plot(x=out1, out2, xlim=c(0,1), ylim=c(0,1), xlab="mu3=0.1", ylab=" mu3=0.02", pch=19, main="dots represent mortality rates")
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=19, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=21, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=25, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=27, mu5=6.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu4 shifts optimum temperature", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col = "slateblue1")#
points(x=temp[1:69], y=out3[1:69], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:80], y=out4[1:80], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu4= 19", "mu4= 21", "mu4= 23", "mu4= 25", "mu4=27"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
#
# Explore mu5#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=23, mu5=4.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=5.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=7.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=8.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="higher mu5 -> wider thermal range", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:66], y=out2[1:66], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:70], y=out3[1:70], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:75], y=out4[1:75], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu5= 4.5", "mu5= 5.5", "mu5= 6.5", "mu5= 7.5", "mu5=8.5"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")
##############################################################################
mortrate= function(gamma, mu3, mu4, mu5, t){#
	v<-((t-mu4)/mu5)^2#
	m<-gamma*mu3*exp(v)#
	return(m)#
}#
# in text for pupal stage: gamma=6 ; mu3=0.02; mu4=23 mu5= 6.5 #
#
# Explore mu3#
##############################################################################
out<-NA; out1<-NA; out2<-NA; out3<-NA; out4<-NA#
temp<-seq(15, 35, 0.25)#
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3=0.001, mu4=23, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.01, mu4=23, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.04, mu4=23, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.06, mu4=23, mu5=6.5, t=temp[i])#
}#
# NEED TO FIT WITH gamma = 1, becuase this re-creates lindsey's results!#
#
par(mfrow=c(1,3))#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu3 increases baseline mortality", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:75], y=out3[1:75], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:65], y=out4[1:65], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu3= 0.001", "mu3= 0.01", "mu3= 0.02", "mu3= 0.04", "mu3=0.06"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty ="n")#
#
#plot(x=out1, out2, xlim=c(0,1), ylim=c(0,1), xlab="mu3=0.1", ylab=" mu3=0.02", pch=19, main="dots represent mortality rates")#
#
# Explore mu4#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=19, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=21, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=25, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=27, mu5=6.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu4 shifts optimum temperature", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col = "slateblue1")#
points(x=temp[1:69], y=out3[1:69], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:80], y=out4[1:80], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu4= 19", "mu4= 21", "mu4= 23", "mu4= 25", "mu4=27"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
#
# Explore mu5#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=23, mu5=4.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=5.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=7.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=8.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="higher mu5 -> wider thermal range", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:66], y=out2[1:66], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:70], y=out3[1:70], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:75], y=out4[1:75], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu5= 4.5", "mu5= 5.5", "mu5= 6.5", "mu5= 7.5", "mu5=8.5"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.27/13, 0.45/13, 0.47/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.82/13, 0.93/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059)) #
Aedes <- list(Aedes_aegypti_mort_data, Aedes_albopictus_mort_data)#
#
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
		" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
		" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
df
Culex
for(i in 1:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
		" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
		" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
df
par(mfrow = c(1,2))#
for(i in 1:length(Aedes)){#
	plot(y = Aedes[[i]]$rate, x = Aedes[[i]]$temp, #
		pch = 19, col= i, main = df$species[i+length(Culex)], #
		xlim = c(10, 35), ylim = c(0, 1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Aedes[[i]])#
	df$mortrate_mu3[i+length(Culex)]  <- params[[1]]#
	df$mortrate_mu4[i+length(Culex)] <- params[[2]]#
	df$mortrate_mu5[i+length(Culex)] <- params[[3]]#
	df$min4[i+length(Culex)] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions (good, same)#
	params <- get_fit_mortality2(Aedes[[i]])#
	df$mortrate2_mu3[i+length(Culex)]  <- params[[1]]#
	df$mortrate2_mu4[i+length(Culex)] <- params[[2]]#
	df$mortrate2_mu5[i+length(Culex)] <- params[[3]]#
	df$min5[i+length(Culex)] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("Low: mu3 = ", #
		round(df$mortrate_mu3[i+length(Culex)], 3),#
		" mu4 = ", round(df$mortrate_mu4[i+length(Culex)], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i+length(Culex)], 3)), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", #
		round(df$mortrate2_mu3[i+length(Culex)], 3), #
		" mu4 = ", round(df$mortrate2_mu4[i+length(Culex)], 3), sep = "", #
		" mu5 = ", round(df$mortrate2_mu5[i+length(Culex)], 3)), cex = 0.7)#
	rm(params) #
}
##############################################################################
##############################################################################
## 3) Fit Baseline Adult Mortality rates, without treatments to data#
##############################################################################
##############################################################################
Culex_pipiens_adultmort_data = data.frame(  # Ruybal et al. 2016.  #
#GUESS- ESTIMATED- NOT GRAPH CLICK!!!!!!!!#
	temp = c(rep( c(16, 20, 24, 27, 31, 35), 3)), #
	rate = c( 1-0.995, 1-0.993, 1-0.99, 1-0.97, 1-0.8, 1-0.3, # dark gray #
		1-0.995, 1-0.993, 1-0.992, 1-0.975, 1-0.8, 1-0.18, # light gray#
		1-0.995, 1-0.992, 1-0.985, 1-0.96, 1-0.80, 1-0.4))		#
Culex_pipiens_adultmort_data2 = data.frame(  # Ciota et al. 2014#
	temp = c(16, 16, 20, 20, 24, 24, 28, 28, 32, 32),#
	rate = c(1/87, 1/72, 1/68, 1/43, 1/31, 1/26, 1/7.5, 1/19.3, 1/23.7, 1/2.9))#
Culex_pipiens_adultmort_data_combined = data.frame(#
	temp = c(Culex_pipiens_adultmort_data$temp, Culex_pipiens_adultmort_data2$temp ), #
	rate = c(Culex_pipiens_adultmort_data$rate, Culex_pipiens_adultmort_data2$rate))#
#
mortrate_adult = function(mu0, mu1, mu2, t){#
	v<-((t-mu1)/mu2)^4#
	m<-mu0*exp(v)#
	return(m)#
}#
#
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate_adult(mu0 = param1, #
		mu1 = param2, mu2 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line_adult = function(t, params){#
	mu0 <- params[1]#
	mu1 <- params[2]#
	mu2 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate_adult(mu0= mu0, mu1=mu1, mu2=mu2, t[i])#
	}#
	return(val)#
}#
#
get_fit_adult_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	#out <- optim(c(0.02, 23, 6.5), objective, observed = observed, #
	#	temperature = temperature, method = "L-BFGS-B", #
	#	lower = c(0.00001,  10, 0), upper = c(0, 35, 40)) #
	mu0 <- out$par[1]  ; mu1 <- out$par[2]; mu2 <- out$par[3]; min <- out$value#
	return(c(mu0 = mu0, mu1 = mu1, mu2 = mu2, min = min))#
}#
#
plot(y = Culex_pipiens_adultmort_data_combined$rate,#
	x = Culex_pipiens_adultmort_data_combined$temp, #
	pch = 19, col= 1, main = "Culex pipiens", #
	xlim = c(10, 35), ylim = c(0, 1), xlab = "Temperature (C)", #
	ylab = "Adult mortality rate (1/days)")#
#
params <- get_fit_adult_mortality(Culex_pipiens_adultmort_data_combined)#
lines(y = get_line_adult(t= seq(5, 35, 1), params = c(#
	params[[1]], params[[2]], params[[3]])), #
	x = seq(5, 35, 1) , col = 1, lty = 3)#
lines(y = get_line_adult(t= seq(5, 35, 1), params = c(#
	0.02, 20, 6.5)), #
	x = seq(5, 35, 1) , col = 1, lty = 3)#
lines(y = get_line_adult(t= seq(5, 35, 1), #
	params = c(0.02, 22, 6.5)), #
	x = seq(5, 35, 1) , col = 1, lty = 3)#
lines(y = get_line_adult(t= seq(5, 35, 1), #
	params = c(0.02, 24, 6.5)), #
	x = seq(5, 35, 1) , col = 1, lty = 3)#
lines(y = get_line_adult(t= seq(5, 35, 1), #
	params = c(0.02, 20, 8)), #
	x = seq(5, 35, 1) , col = 2, lty = 3)#
lines(y = get_line_adult(t= seq(5, 35, 1), #
	params = c(0.02, 22, 8)), #
	x = seq(5, 35, 1) , col = 2, lty = 3)#
lines(y = get_line_adult(t= seq(5, 35, 1), #
	params = c(0.02, 24, 8)), #
	x = seq(5, 35, 1) , col = 2, lty = 3)#
#
lines(y = get_line_adult(t= seq(5, 35, 1), #
	params = c(0.01, 20, 7)), #
	x = seq(5, 35, 1) , col = 3, lty = 3)#
lines(y = get_line_adult(t= seq(5, 35, 1), #
	params = c(0.04, 22, 7)), #
	x = seq(5, 35, 1) , col = 3, lty = 3)#
lines(y = get_line_adult(t= seq(5, 35, 1), #
	params = c(0.02, 22, 9)), #
	x = seq(5, 35, 1) , col = 4, lty = 3)
##############################################################################
##############################################################################
##############################################################################
##############################################################################
# CODE TO PLOT MORTALITY FUNCTIONS#
# ESTIMATE PARAMETERS FROM DATA#
##############################################################################
##############################################################################
##############################################################################
##############################################################################
# OUTLINE#
## 1) Explore Mortality Rates delta (t)#
## 2) Fit Baseline Mortality Rates, delta(t), without treatments to data#
## 3) Fit Baseline Adult Mortality rates, without treatments to data#
#
## 4) Fit Parameters describing treatments to mortality rate data#
##############################################################################
##############################################################################
##############################################################################
#
##############################################################################
##############################################################################
#1) Explore Mortality Rates (delta(t)) #
##############################################################################
##############################################################################
mortrate= function(gamma, mu3, mu4, mu5, t){#
	v<-((t-mu4)/mu5)^2#
	m<-gamma*mu3*exp(v)#
	return(m)#
}#
# in text for pupal stage: gamma=6 ; mu3=0.02; mu4=23 mu5= 6.5 #
#
# Explore mu3#
##############################################################################
out<-NA; out1<-NA; out2<-NA; out3<-NA; out4<-NA#
temp<-seq(15, 35, 0.25)#
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3=0.001, mu4=23, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.01, mu4=23, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.04, mu4=23, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.06, mu4=23, mu5=6.5, t=temp[i])#
}#
# NEED TO FIT WITH gamma = 1, becuase this re-creates lindsey's results!#
#
par(mfrow=c(1,3))#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu3 increases baseline mortality", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:75], y=out3[1:75], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:65], y=out4[1:65], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu3= 0.001", "mu3= 0.01", "mu3= 0.02", "mu3= 0.04", "mu3=0.06"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty ="n")#
#
#plot(x=out1, out2, xlim=c(0,1), ylim=c(0,1), xlab="mu3=0.1", ylab=" mu3=0.02", pch=19, main="dots represent mortality rates")#
#
# Explore mu4#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=19, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=21, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=25, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=27, mu5=6.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu4 shifts optimum temperature", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col = "slateblue1")#
points(x=temp[1:69], y=out3[1:69], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:80], y=out4[1:80], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu4= 19", "mu4= 21", "mu4= 23", "mu4= 25", "mu4=27"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
#
# Explore mu5#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=23, mu5=4.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=5.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=7.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=8.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="higher mu5 -> wider thermal range", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:66], y=out2[1:66], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:70], y=out3[1:70], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:75], y=out4[1:75], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu5= 4.5", "mu5= 5.5", "mu5= 6.5", "mu5= 7.5", "mu5=8.5"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
##############################################################################
##############################################################################
# 2) Fit Baseline Juveinle Mortality Rates, delta(t), without treatments to data#
##############################################################################
##############################################################################
# Non-linear, ordinary least squares to fit base-line development rate. Assumes normally distributed errors.#
# Data#
##############################################################################
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.27/13, 0.45/13, 0.47/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.82/13, 0.93/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))#
#
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059)) #
Aedes <- list(Aedes_aegypti_mort_data, Aedes_albopictus_mort_data)#
#
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
for(i in 1:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
		" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
		" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
par(mfrow = c(1,2))#
for(i in 1:length(Aedes)){#
	plot(y = Aedes[[i]]$rate, x = Aedes[[i]]$temp, #
		pch = 19, col= i, main = df$species[i+length(Culex)], #
		xlim = c(10, 35), ylim = c(0, 1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Aedes[[i]])#
	df$mortrate_mu3[i+length(Culex)]  <- params[[1]]#
	df$mortrate_mu4[i+length(Culex)] <- params[[2]]#
	df$mortrate_mu5[i+length(Culex)] <- params[[3]]#
	df$min4[i+length(Culex)] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions (good, same)#
	params <- get_fit_mortality2(Aedes[[i]])#
	df$mortrate2_mu3[i+length(Culex)]  <- params[[1]]#
	df$mortrate2_mu4[i+length(Culex)] <- params[[2]]#
	df$mortrate2_mu5[i+length(Culex)] <- params[[3]]#
	df$min5[i+length(Culex)] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("Low: mu3 = ", #
		round(df$mortrate_mu3[i+length(Culex)], 3),#
		" mu4 = ", round(df$mortrate_mu4[i+length(Culex)], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i+length(Culex)], 3)), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", #
		round(df$mortrate2_mu3[i+length(Culex)], 3), #
		" mu4 = ", round(df$mortrate2_mu4[i+length(Culex)], 3), sep = "", #
		" mu5 = ", round(df$mortrate2_mu5[i+length(Culex)], 3)), cex = 0.7)#
	rm(params) #
}
ESTIMATE PARAMETERS FROM DATA#
##############################################################################
##############################################################################
##############################################################################
##############################################################################
# OUTLINE#
## 1) Explore Mortality Rates delta (t)#
## 2) Fit Baseline Mortality Rates, delta(t), without treatments to data#
## 3) Fit Baseline Adult Mortality rates, without treatments to data#
#
## 4) Fit Parameters describing treatments to mortality rate data#
##############################################################################
##############################################################################
##############################################################################
#
##############################################################################
##############################################################################
#1) Explore Mortality Rates (delta(t)) #
##############################################################################
##############################################################################
mortrate= function(gamma, mu3, mu4, mu5, t){#
	v<-((t-mu4)/mu5)^2#
	m<-gamma*mu3*exp(v)#
	return(m)#
}#
# in text for pupal stage: gamma=6 ; mu3=0.02; mu4=23 mu5= 6.5 #
#
# Explore mu3#
##############################################################################
out<-NA; out1<-NA; out2<-NA; out3<-NA; out4<-NA#
temp<-seq(15, 35, 0.25)#
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3=0.001, mu4=23, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.01, mu4=23, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.04, mu4=23, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.06, mu4=23, mu5=6.5, t=temp[i])#
}#
# NEED TO FIT WITH gamma = 1, becuase this re-creates lindsey's results!#
#
par(mfrow=c(1,3))#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu3 increases baseline mortality", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:75], y=out3[1:75], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:65], y=out4[1:65], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu3= 0.001", "mu3= 0.01", "mu3= 0.02", "mu3= 0.04", "mu3=0.06"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty ="n")#
#
#plot(x=out1, out2, xlim=c(0,1), ylim=c(0,1), xlab="mu3=0.1", ylab=" mu3=0.02", pch=19, main="dots represent mortality rates")#
#
# Explore mu4#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=19, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=21, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=25, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=27, mu5=6.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu4 shifts optimum temperature", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col = "slateblue1")#
points(x=temp[1:69], y=out3[1:69], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:80], y=out4[1:80], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu4= 19", "mu4= 21", "mu4= 23", "mu4= 25", "mu4=27"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
#
# Explore mu5#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=23, mu5=4.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=5.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=7.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=8.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="higher mu5 -> wider thermal range", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:66], y=out2[1:66], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:70], y=out3[1:70], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:75], y=out4[1:75], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu5= 4.5", "mu5= 5.5", "mu5= 6.5", "mu5= 7.5", "mu5=8.5"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")
##############################################################################
##############################################################################
# 2) Fit Baseline Juveinle Mortality Rates, delta(t), without treatments to data#
##############################################################################
##############################################################################
# Non-linear, ordinary least squares to fit base-line development rate. Assumes normally distributed errors.#
# Data#
##############################################################################
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.27/13, 0.45/13, 0.47/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.82/13, 0.93/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))
M_mort_data
Culex_pipiens_mort_data
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 3/2, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}
al <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=3/2, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=3/2, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 3/2 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 3/2 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
for(i in 1:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
		" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
		" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
Culex
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
		" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
		" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.04, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
		" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
		" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.08, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.08, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
df
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.08, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.5)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
plot(y = M_mort_data$baseline, x = M_mort_data$temp, #
	pch = 19, col= "dark green", main = "Experimental, baseline", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")
M_mort_data
points(y = M_mort_data$rate[M_mort_data$treatment=="baseline"], x = M_mort_data$temp[M_mort_data$treatment=="baseline"], pch = 19, col = "dark green")
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.3/13, 0.43/13, 0.45/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.82/13, 0.93/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))#
#
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059)) #
Aedes <- list(Aedes_aegypti_mort_data, Aedes_albopictus_mort_data)#
#
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 25, y = 0.08, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.5)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
#
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "dark green", main = "Experimental, baseline", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.33/13, 0.43/13, 0.45/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.82/13, 0.93/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))#
#
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059))
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 15, y = 0.08, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
#
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "dark green", main = "Experimental, baseline", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")
##############################################################################
##############################################################################
# 2) Fit Baseline Juveinle Mortality Rates, delta(t), without treatments to data#
##############################################################################
##############################################################################
# Non-linear, ordinary least squares to fit base-line development rate. Assumes normally distributed errors.#
# Data#
##############################################################################
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.33/13, 0.43/13, 0.45/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.82/13, 0.93/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))#
#
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059)) #
Aedes <- list(Aedes_aegypti_mort_data, Aedes_albopictus_mort_data)#
#
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("Low: mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
#
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "dark green", main = "Experimental, baseline", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")
df
M_mort_data
# For experimental data, need fixed point#
objective_exp <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = 20.737, mu5 = param2, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
get_fit_mortality_fixedmid = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 6.5), objective_exp, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]; mu5 <- out$par[2]; min <- out$value#
	return(c(mu3 = mu3, mu5 = mu5, min = min))#
}
##############################################################################
#1) Explore Mortality Rates (delta(t)) #
##############################################################################
##############################################################################
mortrate= function(gamma, mu3, mu4, mu5, t){#
	v<-((t-mu4)/mu5)^2#
	m<-gamma*mu3*exp(v)#
	return(m)#
}#
# in text for pupal stage: gamma=6 ; mu3=0.02; mu4=23 mu5= 6.5 #
#
# Explore mu3#
##############################################################################
out<-NA; out1<-NA; out2<-NA; out3<-NA; out4<-NA#
temp<-seq(15, 35, 0.25)#
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3=0.001, mu4=23, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.01, mu4=23, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.04, mu4=23, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.06, mu4=23, mu5=6.5, t=temp[i])#
}#
# NEED TO FIT WITH gamma = 1, becuase this re-creates lindsey's results!#
#
par(mfrow=c(1,3))#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu3 increases baseline mortality", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:75], y=out3[1:75], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:65], y=out4[1:65], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu3= 0.001", "mu3= 0.01", "mu3= 0.02", "mu3= 0.04", "mu3=0.06"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty ="n")#
#
#plot(x=out1, out2, xlim=c(0,1), ylim=c(0,1), xlab="mu3=0.1", ylab=" mu3=0.02", pch=19, main="dots represent mortality rates")#
#
# Explore mu4#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=19, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=21, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=25, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=27, mu5=6.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu4 shifts optimum temperature", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col = "slateblue1")#
points(x=temp[1:69], y=out3[1:69], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:80], y=out4[1:80], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu4= 19", "mu4= 21", "mu4= 23", "mu4= 25", "mu4=27"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
#
# Explore mu5#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=23, mu5=4.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=5.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=7.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=8.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="higher mu5 -> wider thermal range", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:66], y=out2[1:66], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:70], y=out3[1:70], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:75], y=out4[1:75], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu5= 4.5", "mu5= 5.5", "mu5= 6.5", "mu5= 7.5", "mu5=8.5"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
##############################################################################
##############################################################################
# 2) Fit Baseline Juveinle Mortality Rates, delta(t), without treatments to data#
##############################################################################
##############################################################################
# Non-linear, ordinary least squares to fit base-line development rate. Assumes normally distributed errors.#
# Data#
##############################################################################
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.33/13, 0.43/13, 0.45/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.81/13, 0.91/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))#
#
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059)) #
Aedes <- list(Aedes_aegypti_mort_data, Aedes_albopictus_mort_data)#
#
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
# For experimental data, need fixed point#
objective_exp <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = 20.737, mu5 = param2, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
get_fit_mortality_fixedmid = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 6.5), objective_exp, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]; mu5 <- out$par[2]; min <- out$value#
	return(c(mu3 = mu3, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
#
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "dark green", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")#
#
# assume same mid-point as the other studies (set mu4= 20.7)#
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "green")
##############################################################################
##############################################################################
##############################################################################
##############################################################################
# CODE TO PLOT MORTALITY FUNCTIONS#
# ESTIMATE PARAMETERS FROM DATA#
##############################################################################
##############################################################################
##############################################################################
##############################################################################
# OUTLINE#
## 1) Explore Mortality Rates delta (t)#
## 2) Fit Baseline Mortality Rates, delta(t), without treatments to data#
## 3) Fit Baseline Adult Mortality rates, without treatments to data#
#
## 4) Fit Parameters describing treatments to mortality rate data#
##############################################################################
##############################################################################
##############################################################################
#
##############################################################################
##############################################################################
#1) Explore Mortality Rates (delta(t)) #
##############################################################################
##############################################################################
mortrate= function(gamma, mu3, mu4, mu5, t){#
	v<-((t-mu4)/mu5)^2#
	m<-gamma*mu3*exp(v)#
	return(m)#
}#
# in text for pupal stage: gamma=6 ; mu3=0.02; mu4=23 mu5= 6.5 #
#
# Explore mu3#
##############################################################################
out<-NA; out1<-NA; out2<-NA; out3<-NA; out4<-NA#
temp<-seq(15, 35, 0.25)#
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3=0.001, mu4=23, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.01, mu4=23, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.04, mu4=23, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.06, mu4=23, mu5=6.5, t=temp[i])#
}#
# NEED TO FIT WITH gamma = 1, becuase this re-creates lindsey's results!#
#
par(mfrow=c(1,3))#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu3 increases baseline mortality", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:75], y=out3[1:75], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:65], y=out4[1:65], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu3= 0.001", "mu3= 0.01", "mu3= 0.02", "mu3= 0.04", "mu3=0.06"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty ="n")#
#
#plot(x=out1, out2, xlim=c(0,1), ylim=c(0,1), xlab="mu3=0.1", ylab=" mu3=0.02", pch=19, main="dots represent mortality rates")#
#
# Explore mu4#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=19, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=21, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=25, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=27, mu5=6.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu4 shifts optimum temperature", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col = "slateblue1")#
points(x=temp[1:69], y=out3[1:69], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:80], y=out4[1:80], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu4= 19", "mu4= 21", "mu4= 23", "mu4= 25", "mu4=27"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
#
# Explore mu5#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=23, mu5=4.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=5.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=7.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=8.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="higher mu5 -> wider thermal range", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:66], y=out2[1:66], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:70], y=out3[1:70], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:75], y=out4[1:75], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu5= 4.5", "mu5= 5.5", "mu5= 6.5", "mu5= 7.5", "mu5=8.5"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
##############################################################################
##############################################################################
# 2) Fit Baseline Juveinle Mortality Rates, delta(t), without treatments to data#
##############################################################################
##############################################################################
# Non-linear, ordinary least squares to fit base-line development rate. Assumes normally distributed errors.#
# Data#
##############################################################################
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.33/13, 0.43/13, 0.45/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.81/13, 0.91/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))#
#
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059)) #
Aedes <- list(Aedes_aegypti_mort_data, Aedes_albopictus_mort_data)#
#
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
# For experimental data, need fixed point#
objective_exp <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = 20.737, mu5 = param2, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
get_fit_mortality_fixedmid = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 6.5), objective_exp, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]; mu5 <- out$par[2]; min <- out$value#
	return(c(mu3 = mu3, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
#
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")#
#
# assume same mid-point as the other studies (set mu4= 20.7)#
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "seagreen4")
get_fit_mortality
params <- get_fit_mortality_fixedmid(M_mort_data[M_mort_data$treatment== "baseline"])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5[i] <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)
params <- get_fit_mortality_fixedmid(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5[i] <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)
params <- get_fit_mortality_fixedmid(M_mort_data[M_mort_data$treatment== "baseline",])
params
mu3  <- params[[1]]; mu4 <- 20.737; mu5[i] <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)
params <- get_fit_mortality_fixedmid(M_mort_data[M_mort_data$treatment== "nutrient",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5), #
x = seq(5, 35, 1) , col = "seagreen4", lty = 2)
params <- get_fit_mortality_fixedmid(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)
params <- get_fit_mortality_fixedmid(M_mort_data[M_mort_data$treatment== "nutrient",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen4", lty = 2)
get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5))
get_line
mortrate
params
mu4
mu3
mu5
0.737/0.0022
params <- get_fit_mortality_fixedmid(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]
mu3
mu5
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)
y
get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5))
gamma
get_line
mortrate
v<-((t-mu4)/mu5)^2#
	m<-1*mu3*exp(v)
m
v
exp(v)
plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params)
dev.off()
plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params)
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "seagreen4")
plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params)
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "seagreen4")
points(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3")
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)
params <- get_fit_mortality2(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen4", lty = 2)
mu3
mu4
mu5
##############################################################################
##############################################################################
# 2) Fit Baseline Juveinle Mortality Rates, delta(t), without treatments to data#
##############################################################################
##############################################################################
# Non-linear, ordinary least squares to fit base-line development rate. Assumes normally distributed errors.#
# Data#
##############################################################################
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.33/13, 0.43/13, 0.45/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.81/13, 0.91/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))#
#
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059)) #
Aedes <- list(Aedes_aegypti_mort_data, Aedes_albopictus_mort_data)#
#
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
# For experimental data, need fixed point#
objective_exp <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = 20.737, mu5 = param2, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
get_fit_mortality_fixedmid = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 6.5), objective_exp, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]; mu5 <- out$par[2]; min <- out$value#
	return(c(mu3 = mu3, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
#
# assume same mid-point as the other studies (set mu4= 20.7)#
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)#
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "seagreen4")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "nutrient",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen4", lty = 2)
##############################################################################
##############################################################################
#1) Explore Mortality Rates (delta(t)) #
##############################################################################
##############################################################################
mortrate= function(gamma, mu3, mu4, mu5, t){#
	v<-((t-mu4)/mu5)^2#
	m<-gamma*mu3*exp(v)#
	return(m)#
}#
# in text for pupal stage: gamma=6 ; mu3=0.02; mu4=23 mu5= 6.5 #
#
# Explore mu3#
##############################################################################
out<-NA; out1<-NA; out2<-NA; out3<-NA; out4<-NA#
temp<-seq(15, 35, 0.25)#
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3=0.001, mu4=23, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.01, mu4=23, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.04, mu4=23, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.06, mu4=23, mu5=6.5, t=temp[i])#
}#
# NEED TO FIT WITH gamma = 1, becuase this re-creates lindsey's results!#
#
par(mfrow=c(1,3))#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu3 increases baseline mortality", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:75], y=out3[1:75], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:65], y=out4[1:65], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu3= 0.001", "mu3= 0.01", "mu3= 0.02", "mu3= 0.04", "mu3=0.06"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty ="n")#
#
#plot(x=out1, out2, xlim=c(0,1), ylim=c(0,1), xlab="mu3=0.1", ylab=" mu3=0.02", pch=19, main="dots represent mortality rates")#
#
# Explore mu4#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=19, mu5=6.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=21, mu5=6.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=25, mu5=6.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=27, mu5=6.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="mu4 shifts optimum temperature", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:67], y=out2[1:67], pch=19, cex=0.5, col = "slateblue1")#
points(x=temp[1:69], y=out3[1:69], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:80], y=out4[1:80], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu4= 19", "mu4= 21", "mu4= 23", "mu4= 25", "mu4=27"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
#
# Explore mu5#
##############################################################################
for(i in 1:length(temp)){#
	out[i]<-mortrate(gamma=1, mu3= 0.02, mu4=23, mu5=4.5, t=temp[i])#
	out1[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=5.5, t=temp[i])#
	out2[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=6.5, t=temp[i])#
	out3[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=7.5, t=temp[i])#
	out4[i]<-mortrate(gamma=1, mu3=0.02, mu4=23, mu5=8.5, t=temp[i])#
}#
#
plot(x=temp, y=out, ylim=c(0, 0.8), ylab="Daily mortality rate", xlab="Temperature", main="higher mu5 -> wider thermal range", pch=19, cex=0.5, 	col="black")#
points(x=temp[1:70], y=out1[1:70], pch=19, cex=0.5, col="slateblue4")#
points(x=temp[1:66], y=out2[1:66], pch=19, cex=0.5, col="slateblue1")#
points(x=temp[1:70], y=out3[1:70], pch=19, cex=0.5, col="skyblue3")#
points(x=temp[1:75], y=out4[1:75], pch=19, cex=0.5, col="skyblue1")#
legend("topright", legend=c("mu5= 4.5", "mu5= 5.5", "mu5= 6.5", "mu5= 7.5", "mu5=8.5"), fill=c("black", "slateblue1", "slateblue4", "skyblue3", "skyblue1"), bty = "n")#
##############################################################################
##############################################################################
# 2) Fit Baseline Juveinle Mortality Rates, delta(t), without treatments to data#
##############################################################################
##############################################################################
# Non-linear, ordinary least squares to fit base-line development rate. Assumes normally distributed errors.#
# Data#
##############################################################################
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.33/13, 0.43/13, 0.45/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.81/13, 0.91/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))#
#
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059)) #
Aedes <- list(Aedes_aegypti_mort_data, Aedes_albopictus_mort_data)#
#
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
# For experimental data, need fixed point#
objective_exp <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = 20.737, mu5 = param2, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
get_fit_mortality_fixedmid = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 6.5), objective_exp, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]; mu5 <- out$par[2]; min <- out$value#
	return(c(mu3 = mu3, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = "Ruybel et al. 2016"#df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = "Ruybel et al. 2016"#df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = "Ruybel et al. 2016", #df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)
text(x = 20, y = 0.09, labels = paste("mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "", col = "seagreen3"#
	" mu5 = ", round(mu5, 3)), cex = 0.7)
text(x = 20, y = 0.09, labels = paste("mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "", col = "seagreen3",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)
text(x = 20, y = 0.09, col = "seagreen3", labels = paste("mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)
text(x = 25, y = 0.09, labels = paste("Base: mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "seagreen4")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "nutrient",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen4", lty = 2)#
text(x = 25, y = 0.08, labels = paste("mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)
legend("bottomright", pch = c(19, 19), col = c("seagreen3", "seagreen4"), bty = "n")
##############################################################################
##############################################################################
# 2) Fit Baseline Juveinle Mortality Rates, delta(t), without treatments to data#
##############################################################################
##############################################################################
# Non-linear, ordinary least squares to fit base-line development rate. Assumes normally distributed errors.#
# Data#
##############################################################################
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.33/13, 0.43/13, 0.45/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.81/13, 0.91/13),#
	treatment = c(rep("baseline", 4), rep("nutrient", 4)))#
#
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059)) #
Aedes <- list(Aedes_aegypti_mort_data, Aedes_albopictus_mort_data)#
#
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
# For experimental data, need fixed point#
objective_exp <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = 20.737, mu5 = param2, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
get_fit_mortality_fixedmid = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 6.5), objective_exp, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]; mu5 <- out$par[2]; min <- out$value#
	return(c(mu3 = mu3, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = "Ruybel et al. 2016", #df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
#
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)#
text(x = 25, y = 0.09, labels = paste("Base: mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)#
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "seagreen4")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "nutrient",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen4", lty = 2)#
text(x = 25, y = 0.08, labels = paste("mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)#
legend("bottomright", legend = c("Baseline", "Nutrient"),  pch = c(19, 19), col = c("seagreen3", "seagreen4"), bty = "n")
Culex_pipiens_mort_data = data.frame(  # #
	temp = rep(c(16, 20, 24, 27, 31), 3), #
	rate = c(1-0.997, 1-0.994, 1-0.992, 1-0.984, 1-0.966, #
			 1-0.993, 1-0.991, 1-0.991, 1-0.991, 1-0.980, #
			 1-0.987, 1-0.997, 1-0.998, 1-0.995, 1-0.969), #
	location = c(rep("lowelevation", 5), rep("lowelevation, mid latitued", 5), #
				rep("midelevation", 5)) )		#
#
M_mort_data = data.frame(#
	temp = rep(c(18, 22, 26, 30), 2), #
	rate = c(0.40/13, 0.33/13, 0.43/13, 0.45/13, # eyeballed.TALK ABOUT MEDIAN/MEAN VARIATION#
			0.82/13, 0.78/13, 0.81/13, 0.91/13),#
	treatment = c(rep("nutrient", 4), rep("baseline", 4)))#
#
Culex <- list(NA, NA, NA,Culex_pipiens_mort_data, NA)#
#
Aedes_aegypti_mort_data =  data.frame( # Reuda et al. 1990#
	temp= c(15, 20, 25, 27, 30, 34), #
	rate = c(1- 0.0311, 1- 0.918, 1- 0.626, 1- 0.898, 1- 0.6634, 1-0.5914) )#
#
Aedes_albopictus_mort_data =  data.frame( # Delatte et al. 2009#
	temp= c(20, 25, 30, 35), #
	rate = c(0.043, 0.09, 0.061, 0.059)) #
Aedes <- list(Aedes_aegypti_mort_data, Aedes_albopictus_mort_data)#
#
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
# For experimental data, need fixed point#
objective_exp <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = 20.737, mu5 = param2, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
get_fit_mortality_fixedmid = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 6.5), objective_exp, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]; mu5 <- out$par[2]; min <- out$value#
	return(c(mu3 = mu3, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = "Ruybel et al. 2016", #df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)#
text(x = 25, y = 0.09, labels = paste("Base: mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "seagreen4")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "nutrient",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen4", lty = 2)#
text(x = 25, y = 0.08, labels = paste("mu3 = ", round(mu3, 3), col = "seagreen4",#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)#
legend("bottomright", legend = c("Baseline", "Nutrient"),  pch = c(19, 19), col = c("seagreen3", "seagreen4"), bty = "n")
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
# For experimental data, need fixed point#
objective_exp <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = 20.737, mu5 = param2, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
get_fit_mortality_fixedmid = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 6.5), objective_exp, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]; mu5 <- out$par[2]; min <- out$value#
	return(c(mu3 = mu3, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = "Ruybel et al. 2016", #df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
#
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)#
text(x = 25, y = 0.09, labels = paste("Base: mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)#
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "seagreen4")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "nutrient",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen4", lty = 2)#
text(x = 25, y = 0.08, col = "seagreen4", labels = paste("mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)#
legend("bottomright", legend = c("Baseline", "Nutrient"),  pch = c(19, 19), col = c("seagreen3", "seagreen4"), bty = "n")
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
# For experimental data, need fixed point#
objective_exp <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = 20.737, mu5 = param2, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
get_fit_mortality_fixedmid = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 6.5), objective_exp, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]; mu5 <- out$par[2]; min <- out$value#
	return(c(mu3 = mu3, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = "Ruybel et al. 2016", #df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
#
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)#
text(x = 25, y = 0.09, labels = paste("Base: mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)#
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "seagreen4")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "nutrient",])#
mu3  <- params[[1]]; mu4 <- 20.737; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen4", lty = 2)#
text(x = 25, y = 0.08, labels = paste("N: mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)#
legend("bottomright", legend = c("Baseline", "Nutrient"),  pch = c(19, 19), col = c("seagreen3", "seagreen4"), bty = "n")
# Fit#
##############################################################################
objective <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	param3 <- params[3]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = param2, mu5 = param3, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
#
val <- NA#
t<-seq(10, 40, 0.25)#
get_line = function(t, params){#
	mu3 <- params[1]#
	mu4 <- params[2]#
	mu5 <- params[3]#
	for(i in 1:length(t)){#
		val[i] <- mortrate(gamma=1, mu3= mu3, mu4=mu4, mu5=mu5, t[i])#
	}#
	return(val)#
}#
#
get_fit_mortality = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 20, 6.5), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
get_fit_mortality2 = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.01, 25, 10), objective, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]  ; mu4 <- out$par[2]; mu5 <- out$par[3]; min <- out$value#
	return(c(mu3 = mu3, mu4 = mu4, mu5 = mu5, min = min))#
}#
#
# For experimental data, need fixed point#
objective_exp <- function(params, observed, temperature){#
	##################################################
	# Input: params= c(mu3= mu3, mu4 = mu4, mu5 = mu5)#
	# Returns: SSE, over all input temperatures & obs (data)#
	# must have gamma defined elsewhere#
	##################################################
	param1 <- params[1]#
	param2 <- params[2]#
	predicted <- mortrate(gamma = 1, mu3 = param1, #
		mu4 = 20.737, mu5 = param2, t=temperature)#
	error <- sqrt(sum((observed - predicted)^2))#
	return(error)#
}#
get_fit_mortality_fixedmid = function (df){#
	observed <- df$rate#
	temperature <- df$temp#
	gamma <- 1 # #
	out <- optim(c(0.02, 6.5), objective_exp, observed = observed, #
		temperature = temperature) #
	mu3 <- out$par[1]; mu5 <- out$par[2]; min <- out$value#
	return(c(mu3 = mu3, mu5 = mu5, min = min))#
}#
df <- data.frame(species = c("Culex_qui", "Culex_eduardoi", "Culex_hepperi", "Culex_pipiens", "Culex_pipiens2", "Aedes_aegypti", "Aedes_albopictus"), #
	mortrate_mu3 = NA, mortrate_mu4 = NA, mortrate_mu5 = NA, min4 = NA,#
	mortrate2_mu3 = NA, mortrate2_mu4 = NA, mortrate2_mu5 = NA, min5 = NA)#
#
par(mfrow = c(1,2))#
for(i in 4:4){#
#1:length(Culex)){#
#	if(!(is.na(Culex[[i]])) ){#
	plot(y = Culex[[i]]$rate, x = Culex[[i]]$temp, #
		pch = 19, col= i, main = "Ruybel et al. 2016", #df$species[i], #
		xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
		ylab = "Juvenile mortality rate (1/days)")#
	# first initial conditions#
	params <- get_fit_mortality(Culex[[i]])#
	df$mortrate_mu3[i]  <- params[[1]]#
	df$mortrate_mu4[i] <- params[[2]]#
	df$mortrate_mu5[i] <- params[[3]]#
	df$min4[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 2)#
	# second initial conditions#
	params <- get_fit_mortality2(Culex[[i]])#
	df$mortrate2_mu3[i]  <- params[[1]]#
	df$mortrate2_mu4[i] <- params[[2]]#
	df$mortrate2_mu5[i] <- params[[3]]#
	df$min5[i] <- params[[4]]#
	lines(y = get_line(t= seq(5, 35, 1), params = c(params[[1]], params[[2]], params[[3]])), #
		x = seq(5, 35, 1) , col = i, lty = 3)#
	text(x = 20, y = 0.08, labels = paste("mu3 = ", round(df$mortrate_mu3[i], 3),#
		" mu4 = ", round(df$mortrate_mu4[i], 3), sep = "",#
		" mu5 = ", round(df$mortrate_mu5[i], 3)), cex = 0.7)#
	#text(x = 25, y = 0.02, labels = paste("High (2): mu3 = ", round(df$mortrate2_mu3[i], 3), #
	#	" mu4 = ", round(df$mortrate2_mu4[i], 3), sep = "", #
	#	" mu5 = ", round(df$mortrate2_mu5[i], 3)), cex = 0.7)#
	rm(params) #
}#
#}#
#
plot(y = M_mort_data$rate[M_mort_data$treatment=="baseline"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="baseline"], #
	pch = 19, col= "seagreen3", main = "Experimental data", #
	xlim = c(10, 35), ylim = c(0, 0.1), xlab = "Temperature (C)", #
	ylab = "Juvenile mortality rate (1/days)")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "baseline",])#
mu3  <- params[[1]]; mu4 <- params[[2]]; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen3", lty = 2)#
text(x = 25, y = 0.09, labels = paste("Base: mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)#
points(y = M_mort_data$rate[M_mort_data$treatment=="nutrient"],#
	 x = M_mort_data$temp[M_mort_data$treatment=="nutrient"], #
	pch = 19, col= "seagreen4")#
params <- get_fit_mortality(M_mort_data[M_mort_data$treatment== "nutrient",])#
mu3  <- params[[1]]; mu4 <- params[[2]]; mu5 <- params[[3]]#
lines(y = get_line(t= seq(5, 35, 1), params = c(mu3, mu4, mu5)), #
x = seq(5, 35, 1) , col = "seagreen4", lty = 2)#
text(x = 25, y = 0.08, labels = paste("N: mu3 = ", round(mu3, 3),#
	" mu4 = ", round(mu4, 3), sep = "",#
	" mu5 = ", round(mu5, 3)), cex = 0.7)#
legend("bottomright", legend = c("Baseline", "Nutrient"),  pch = c(19, 19), col = c("seagreen3", "seagreen4"), bty = "n")
Age structured model owes much to:  http://ms.mcmaster.ca/~bolker/eeid/2011_eco/waifw.pdf#
#
##############################################################
##############################################################
#1) Load fixed parameters, model#
##############################################################
##############################################################
rm(list = ls())#
require("deSolve")#
library("plyr")#
library("ggplot2")#
set.seed(5)#
# get fixed.params & fixed.params.recov#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_norecovery_agematrix.R', chdir = TRUE)#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_recovery_agematrix.R', chdir = TRUE)#
# rhs function, determinitic model, age structure#
source('~/GitHub/bTB-bruc-co-infection-ms/rhs_age.R', chdir = TRUE)#
##############################################################
##############################################################
#2) Set-up features of aging#
##############################################################
##############################################################
# age divisions in rhs function#
#(age= 1-3.9, 4-4.9, 5-14.9, 15+)..subsume calf mortality in births#
s_index <- 1:20#
it_index <- 21:40#
ib_index <- 41:60#
ic_index <- 61:80#
r_index <- 81:100#
rc_index <- 101:120#
juveniles <- 1:3#
subadult<- 4#
adult <- 5:14#
mature <- 15:20#
#
# Age structure information, used to calculate mortality rates in susceptibles. #
relageall = c(0.137, rep(0.368/4, 4), rep(0.185/4, 4),  # Jolles 2007, set max age at 20#
	rep(0.235/6, 6), rep(0.075/5, 5))					# Also in Caron et al. from 2001 KNP#
relage = relageall#
#
plot_agestructure = function(x){ # true based on Jolles et al. 2007#
	 xcounts <- NA#
	 if (length(x) != 120){#
	 	print("The age structure should include 20 ages, for 6 disease classes, giving 120 columns")#
	 }#
	 for(i in 1:20){#
	 	xcounts[i] <- (x[i] + x[20+i] + x[40+i] + x[60+i] + x[80+i] + x[100+i])/sum(x)#
	 }#
	 d<-matrix(c(relageall, #
	 	xcounts), nrow=2, byrow=TRUE, #
	 	dimnames=list(c("Observed", "Predicted"), #
	 	c(seq(1:20))))#
	barplot(d, beside = TRUE, col = c("light gray", "dark gray"), ylab = "Frequency (%)")#
	box(	)#
	legend("topleft", legend = c("Observed", "Predicted"), fill = c("light gray", "dark gray"))#
}#
plot_agestructure(x = seq(1, 20))#
#
plot_dz_agestructure = function(x, dz){#
	# Disease options =#
	# "bruc" = brucellosis only#
	# "tb" = bTB only#
	# "co" = all subtypes#
	# x = a row in sol#
	if (length(x) != 120){#
	 	print("The age structure should include 20 ages, #
	 	for 6 disease classes, giving 120 columns")#
	}#
	Sp <- x[1:20]/apply(x, 1, sum); colnames(Sp)<- seq(1:20)#
	Itp <- x[21:40]/apply(x, 1, sum); colnames(Itp)<- seq(1:20)#
	Ibp <- x[41:60]/apply(x, 1, sum); colnames(Ibp)<- seq(1:20)#
	Icp <- x[61:80]/apply(x, 1, sum); colnames(Icp)<- seq(1:20)#
	Rp <- x[81:100]/apply(x, 1, sum); colnames(Rp)<- seq(1:20)#
	Rcp <- x[101:120]/apply(x, 1, sum); colnames(Rcp)<- seq(1:20)#
	mat <- as.matrix(rbind(Sp, Itp, Ibp, Icp, Rp, Rcp))#
	mat[is.na(mat)]<- 0#
	barplot(mat, # columns = age, rows = proportions#
	xlab = 'age', main = "Population structure")	#
#
}#
plot_raw_numbers = function(sol){#
	plot(sol$time, apply(sol[s_index+1], 1, sum), col= "black",#
		type= 'l', ylim = c(0, 1100), ylab = "Number of animals", #
		xlab = "Time (in years)")#
	lines(sol$time, apply(sol[it_index+1], 1, sum), col= "red")#
	lines(sol$time, apply(sol[ib_index+1], 1, sum), col= "blue")#
	lines(sol$time, apply(sol[ic_index+1], 1, sum), col= "green")#
	lines(sol$time, apply(sol[r_index+1], 1, sum), col = "orange")#
	lines(sol$time, apply(sol[rc_index+1], 1, sum), col = "pink")#
	legend("topright", legend = c("S", "It", "Ib", "Ic", "R", "Rc"),#
		col = c("black", "red", "blue", "green", "orange", "pink"), #
		bty="n", lty = 1)#
}#
#
get_prevalence = function(sol){#
	S <- sum(sol[length(sol) , s_index+1])#
	It <- sum(sol[length(sol) , it_index +1])#
	Ib <- sum(sol[length(sol) , ib_index +1])#
	Ic <- sum(sol[length(sol) , ic_index +1])#
	R <- sum(sol[length(sol) , r_index +1])#
	Rc <- sum(sol[length(sol) , rc_index +1])#
	N <- sum(sol[length(sol), 2:121])#
	prevTB <- (It + Ic + Rc) / N #
	prevB <- (Ib + Ic + R + Rc) / N#
	prevBinS <- (Ib + R) / (S + Ib + R)#
	prevBinT <- (Ic + Rc) / (It + Ic + Rc)#
	return(list(prevTB = prevTB, prevB = prevB,#
		prevBinS = prevBinS, prevBinT = prevBinT))#
}#
#
plot_ageprevalence = function(sol){#
	S <- rep(0, 20); It <- rep(0, 20); Ib <- rep(0, 20);#
	Ic <- rep(0, 20); R <- rep(0, 20); Rc <- rep(0, 20)#
	N <- rep(0, 20)#
	for (i in 1:20){#
		S[i] <- sum(sol[length(sol) , i + 1])#
		It[i] <- sum(sol[length(sol) , i + 21])#
		Ib[i] <- sum(sol[length(sol) , 41 +i])#
		Ic[i] <- sum(sol[length(sol) , 61 +i])#
		R[i] <- sum(sol[length(sol) , 81 +i])#
		Rc[i] <- sum(sol[length(sol) , 101 +i])#
		N[i] <- sum(sol[length(sol), c(1+i, 21+i, 41+i, 61 + i, 81+i, 101+i)])#
	}#
	prevB <- (Ib + Ic + R + Rc) / N#
	prevT <- (It + Ic + Rc)/ N#
	prevBinS <- (Ib + R) / (S + Ib + R)#
	prevBinT <- (Ic + Rc) / (It + Ic + Rc) #
	overall_prevB <- (sum(Ib) + sum(Ic) + sum(R) + sum(Rc)) / sum(N)#
	overall_prevT <- (sum(It) + sum(Ic) + sum(Rc)) / sum(N)#
	overall_prevBinS <- (sum(Ib) + sum(R)) / (sum(S) + sum(Ib) + sum(R))#
	overall_prevBinT <- (sum(Ic) + sum(Rc)) / (sum(It) + sum(Ic) + sum(Rc))#
	overallN = sum(N) #
	par(mfrow = c(1,2))#
	plot(y = prevB, x= seq(1, 20, 1), type = "b", col = "dark blue", ylim = c(0, 0.8),#
		ylab = "Prevalence", xlab = "Age", pch = 19, #
		main = paste("Overall prevalences, Br =", round(overall_prevB, 3), #
		" TB = ", round(overall_prevT, 3) ))#
	points(y = prevT, x = seq(1,20,1), type = "b", col = "dark red", pch = 19)#
	legend("bottomright", bty = "n", legend = c("Bruc", "TB"), #
		pch = c(19, 19), col = c("dark blue", "dark red"))#
	plot(y = prevBinS, x = seq(1,20,1), type = "b", col = "dark blue", pch = 19, #
		ylab = "Brucellosis prevalence", xlab = "Age", ylim = c(0, 0.8), #
		main = paste("Br|S =", round(overall_prevBinS, 3), #
		" Br|Co = ", round(overall_prevBinT, 3) )#
		)#
	text(x = 10, y = 0.55, labels = paste("Final N = ", round(overallN, 2)))#
	points(y = prevBinT, x = seq(1,20,1), type = "b", col = "dark red", pch = 19)#
}#
#
##############################################################
##############################################################
# Figure out parameters that give reasonable age structure #
# Test plots, with no Disease, none takes off#
# STILL NEED TO CLARIFY ASSUMPTIONS ON AGE STRUCTURE WITH AND WITHOUT DZ#
##############################################################
S0 = 1000*relage; It0 = 0*relage; Ib0 = 0*relage; #
Ic0 = 0*relage; R0 = 0 * relage; Rc0 = 0 * relage#
x0 = c(S0, It0, Ib0, Ic0, R0, Rc0)#
times <- seq(0, 500, 1)#
params.test = c(fixed.params, list(gamma=1/2, betaB = 0.01,#
	betaT = 0.0001, rhoT = 1.2, rhoB = 4))#
params.test.recov = c(fixed.params.recov, list(gamma=1/2, #
	betaB = 0.0001, betaT = 0.001, rhoT = 1.2, rhoB = 4))#
sol <- as.data.frame(ode(x0, times, rhs_age_matrix_ricker, params.test))#
sol.recov<- as.data.frame(ode(x0, times, rhs_age_matrix_ricker, params.test.recov))#
#
par(mfrow = c(2,2))#
plot(x = sol$time, y = apply(sol[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")#
plot(x = sol.recov$time, y = apply(sol.recov[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, Recovery")#
#
plot_raw_numbers(sol)#
plot_agestructure(as.matrix(sol[101,c(2:121)]))  # better, no density dependence...#
#
stable_age <- unname(unlist( sol[500, c(2:21)]/sum(sol[500, c(2:21)]) ))#
#
# Figure out birth rates taht give age structure above... #
f = function(b, x){#
	1 * exp(-b * x)  # x = Nall, b = scale constant#
}#
# Number of offspring produced (assuming stable equal births/age) at K#
300* f(1/100, 300) # 14.93612#
300* f(1/500, 300)  # 164.6435#
300* f(1/1000, 300)  # 222.2455#
# Need to make that = deaths at stable age distribution...#
# Test 2: Add brucellosis, only get brucellosis --> works! #
##############################################################
params.test = c(fixed.params, list(gamma=1/2, #
	betaB = 0.0015, betaT = 0.001, rhoT = 1.2, rhoB = 4))#
params.test.recov = c(fixed.params.recov, list(gamma=1/2, #
	betaB = 0.0015, betaT = 0.001, rhoT = 1.2, rhoB = 4))#
S0 = 980* stable_age; It0 = 0* stable_age; Ib0 = 20* stable_age; #
Ic0 = 0* stable_age; R0 = 30 * stable_age; Rc0 = 0 * stable_age#
x0 = c(S0, It0, Ib0, Ic0, R0, Rc0)#
times <- seq(0, 500, 1)#
sol <- as.data.frame(ode(x0, times, rhs_age_matrix_ricker, params.test))#
sol.recov<- as.data.frame(ode(x0, times, rhs_age_matrix_ricker, params.test.recov))#
#
par(mfrow = c(2,2))#
plot(x = sol$time, y = apply(sol[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")#
plot(x = sol.recov$time, y = apply(sol.recov[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, Recovery")#
#plot_age_prev_by_coinfection(sol)#
plot_raw_numbers(sol)#
plot_raw_numbers(sol.recov)#
get_prevalence(sol); #
#################
get_prevalence(sol.recov)#
plot_agestructure(as.matrix(sol[101,c(2:121)])) #
plot_ageprevalence(sol)#
#
endemic_agestructure <- unname(unlist( sol[500, c(2:121)]/sum(sol[500, c(2:121)]) ))#
endemic_agestructure_recov <- unname(unlist( sol.recov[500, c(2:121)]/sum(sol.recov[500, c(2:121)]) ))
params.test = c(fixed.params, list(gamma=1/2,#
	betaB = 0.002, betaT = 0.0005, rhoT = 1.2, rhoB = 4))#
params.test.recov = c(fixed.params.recov, list(gamma=1/2, #
	betaB = 0.002, betaT = 0.0005, rhoT = 1.2, rhoB = 4))#
S0 = 980* stable_age; It0 = 2* stable_age; Ib0 = 0* stable_age; #
Ic0 = 0* stable_age; R0 = 0 * stable_age; Rc0 = 0 * stable_age#
x0 = c(S0, It0, Ib0, Ic0, R0, Rc0)#
times <- seq(0, 500, 1)#
sol <- as.data.frame(ode(x0, times, rhs_age_matrix_ricker, params.test))#
sol.recov<- as.data.frame(ode(x0, times, rhs_age_matrix_ricker, params.test.recov))#
#
par(mfrow = c(2,2))#
plot(x = sol$time, y = apply(sol[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")#
plot(x = sol.recov$time, y = apply(sol.recov[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, Recovery")#
#plot_age_prev_by_coinfection(sol)#
plot_raw_numbers(sol)#
plot_raw_numbers(sol.recov)#
get_prevalence(sol); #
#################
get_prevalence(sol.recov)#
#
plot_agestructure(as.matrix(sol[101,c(2:121)])) #
plot_ageprevalence(sol)
params.test = c(fixed.params, list(gamma=1/2, #
	betaB = 0.002, betaT = 0.0005, rhoT = 1.2, rhoB = 2))  #
params.test.recov = c(fixed.params.recov, list(gamma=1/2, #
	betaB = 0.002, betaT = 0.0005, rhoT = 1.2, rhoB = 2))#
# betaT = 0.005 gives bTB prev ~25% without bruc; essentially no prevalence with bruc.#
x0 = 1000 * endemic_agestructure#
x0recov = 1000 * endemic_agestructure_recov#
x0[21:40] <- 5#
x0recov[21:40] <- 5#
times <- seq(0, 500, 1)#
sol <- as.data.frame(ode(x0, times, rhs_age_matrix_ricker, params.test))#
sol.recov<- as.data.frame(ode(x0recov, times, rhs_age_matrix_ricker, params.test.recov))#
#
par(mfrow = c(2,2))#
plot(x = sol$time, y = apply(sol[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")#
plot(x = sol.recov$time, y = apply(sol.recov[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, Recovery")#
#plot_age_prev_by_coinfection(sol)#
plot_raw_numbers(sol)#
plot_raw_numbers(sol.recov)#
get_prevalence(sol); #
#################
get_prevalence(sol.recov)
par(mfrow = c(1,2))#
plot_agestructure(as.matrix(sol[101,c(2:121)])) #
plot_ageprevalence(sol)#
plot_ageprevalence(sol.recov)#
#
# only works without recovery: But without recovery, we get waay less bTB than without brucellosis#
params.test = c(fixed.params, list(gamma=1/2, #
	betaB = 0.002, betaT = 0.0006, rhoT = 1, rhoB = 1))  #
sol <- as.data.frame(ode(x0, times, rhs_age_matrix_ricker, params.test))#
plot_ageprevalence(sol)#
get_prevalence(sol)
##########################################
##########################################
library(ggplots2)#
library(lme4)#
library(pbkrtest)#
library("JM")#
library("lattice")#
library("survival")#
#
#############################################################
#############################################################
data<-read.csv("~/Documents/postdoc_buffology/Last-Thesis-Chapter!!!!!!/final_datasets_copied_from_phdfolder/cross_sectional_data_withdz_cleandisease_nofinal_Feb2016_capturetime_forsurv.csv")  # 5 animals added from last time#
#
# make datasets for Courtney#
convert<-data[data $brucconvert==1 & data$convert==1,]#
write.csv(convert, "~/Documents/postdoc_buffology/Last-Thesis-Chapter!!!!!!/final_datasets_copied_from_phdfolder/convertersonly_Feb2016.csv")#
length(convert$id); length(unique(convert$id))  # 14 both, 98 time observations#
#
brconvert<- data[data$brucconvert==1,]#
write.csv(brconvert, "~/Documents/postdoc_buffology/Last-Thesis-Chapter!!!!!!/final_datasets_copied_from_phdfolder/brucconverters_Feb2016.csv")#
length(brconvert$id); length(unique(brconvert$id))  # 29 became infected with brucellosis, 190 time observations#
#
tbconvert<- data[data$convert==1,]#
write.csv(tbconvert, "~/Documents/postdoc_buffology/Last-Thesis-Chapter!!!!!!/final_datasets_copied_from_phdfolder/tbconverters_Feb2016.csv")#
length(tbconvert$id); length(unique(tbconvert$id))  # 47 became infected with bTB; 288 time observations
#41 converters in cross-sectional data, 41 in bTB incidence data... #
cross<-read.csv("~/Documents/postdoc_buffology/Last-Thesis-Chapter!!!!!!/final_datasets_copied_from_phdfolder/cross_sectional_data_withdz_cleandisease_nofinal_Feb2016_capturetime_forsurv.csv")  # 5 animals added from last time
##############################################################
##############################################################
#1) Load fixed parameters, model#
##############################################################
##############################################################
rm(list = ls())#
require("deSolve")#
library("plyr")#
library("ggplot2")#
set.seed(5)#
# get fixed.params & fixed.params.recov#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_norecovery_agematrix.R', chdir = TRUE)#
source('~/GitHub/bTB-bruc-co-infection-ms/fixed_parameters_recovery_agematrix.R', chdir = TRUE)#
# rhs function, determinitic model, age structure#
source('~/GitHub/bTB-bruc-co-infection-ms/rhs_age.R', chdir = TRUE)#
#
##############################################################
##############################################################
#2) Set-up features of aging#
##############################################################
##############################################################
# age divisions in rhs function#
#(age= 1-3.9, 4-4.9, 5-14.9, 15+)..subsume calf mortality in births#
s_index <- 1:20#
it_index <- 21:40#
ib_index <- 41:60#
ic_index <- 61:80#
r_index <- 81:100#
rc_index <- 101:120#
juveniles <- 1:3#
subadult<- 4#
adult <- 5:14#
mature <- 15:20#
#
# Age structure information, used to calculate mortality rates in susceptibles. #
relageall = c(0.137, rep(0.368/4, 4), rep(0.185/4, 4),  # Jolles 2007, set max age at 20#
	rep(0.235/6, 6), rep(0.075/5, 5))					# Also in Caron et al. from 2001 KNP#
relage = relageall#
#
plot_agestructure = function(x){ # true based on Jolles et al. 2007#
	 xcounts <- NA#
	 if (length(x) != 120){#
	 	print("The age structure should include 20 ages, for 6 disease classes, giving 120 columns")#
	 }#
	 for(i in 1:20){#
	 	xcounts[i] <- (x[i] + x[20+i] + x[40+i] + x[60+i] + x[80+i] + x[100+i])/sum(x)#
	 }#
	 d<-matrix(c(relageall, #
	 	xcounts), nrow=2, byrow=TRUE, #
	 	dimnames=list(c("Observed", "Predicted"), #
	 	c(seq(1:20))))#
	barplot(d, beside = TRUE, col = c("light gray", "dark gray"), ylab = "Frequency (%)")#
	box(	)#
	legend("topleft", legend = c("Observed", "Predicted"), fill = c("light gray", "dark gray"))#
}#
plot_agestructure(x = seq(1, 20))#
#
plot_dz_agestructure = function(x, dz){#
	# Disease options =#
	# "bruc" = brucellosis only#
	# "tb" = bTB only#
	# "co" = all subtypes#
	# x = a row in sol#
	if (length(x) != 120){#
	 	print("The age structure should include 20 ages, #
	 	for 6 disease classes, giving 120 columns")#
	}#
	Sp <- x[1:20]/apply(x, 1, sum); colnames(Sp)<- seq(1:20)#
	Itp <- x[21:40]/apply(x, 1, sum); colnames(Itp)<- seq(1:20)#
	Ibp <- x[41:60]/apply(x, 1, sum); colnames(Ibp)<- seq(1:20)#
	Icp <- x[61:80]/apply(x, 1, sum); colnames(Icp)<- seq(1:20)#
	Rp <- x[81:100]/apply(x, 1, sum); colnames(Rp)<- seq(1:20)#
	Rcp <- x[101:120]/apply(x, 1, sum); colnames(Rcp)<- seq(1:20)#
	mat <- as.matrix(rbind(Sp, Itp, Ibp, Icp, Rp, Rcp))#
	mat[is.na(mat)]<- 0#
	barplot(mat, # columns = age, rows = proportions#
	xlab = 'age', main = "Population structure")	#
#
}#
plot_raw_numbers = function(sol){#
	plot(sol$time, apply(sol[s_index+1], 1, sum), col= "black",#
		type= 'l', ylim = c(0, 1500), ylab = "Number of animals", #
		xlab = "Time (in years)")#
	lines(sol$time, apply(sol[it_index+1], 1, sum), col= "red")#
	lines(sol$time, apply(sol[ib_index+1], 1, sum), col= "blue")#
	lines(sol$time, apply(sol[ic_index+1], 1, sum), col= "green")#
	lines(sol$time, apply(sol[r_index+1], 1, sum), col = "orange")#
	lines(sol$time, apply(sol[rc_index+1], 1, sum), col = "pink")#
	legend("topright", legend = c("S", "It", "Ib", "Ic", "R", "Rc"),#
		col = c("black", "red", "blue", "green", "orange", "pink"), #
		bty="n", lty = 1)#
}#
#
get_prevalence = function(sol){#
	S <- sum(sol[length(sol) , s_index+1])#
	It <- sum(sol[length(sol) , it_index +1])#
	Ib <- sum(sol[length(sol) , ib_index +1])#
	Ic <- sum(sol[length(sol) , ic_index +1])#
	R <- sum(sol[length(sol) , r_index +1])#
	Rc <- sum(sol[length(sol) , rc_index +1])#
	N <- sum(sol[length(sol), 2:121])#
	prevTB <- (It + Ic + Rc) / N #
	prevB <- (Ib + Ic + R + Rc) / N#
	prevBinS <- (Ib + R) / (S + Ib + R)#
	prevBinT <- (Ic + Rc) / (It + Ic + Rc)#
	return(list(prevTB = prevTB, prevB = prevB,#
		prevBinS = prevBinS, prevBinT = prevBinT))#
}#
#
plot_ageprevalence = function(sol){#
	S <- rep(0, 20); It <- rep(0, 20); Ib <- rep(0, 20);#
	Ic <- rep(0, 20); R <- rep(0, 20); Rc <- rep(0, 20)#
	N <- rep(0, 20)#
	for (i in 1:20){#
		S[i] <- sum(sol[length(sol) , i + 1])#
		It[i] <- sum(sol[length(sol) , i + 21])#
		Ib[i] <- sum(sol[length(sol) , 41 +i])#
		Ic[i] <- sum(sol[length(sol) , 61 +i])#
		R[i] <- sum(sol[length(sol) , 81 +i])#
		Rc[i] <- sum(sol[length(sol) , 101 +i])#
		N[i] <- sum(sol[length(sol), c(1+i, 21+i, 41+i, 61 + i, 81+i, 101+i)])#
	}#
	prevB <- (Ib + Ic + R + Rc) / N#
	prevT <- (It + Ic + Rc)/ N#
	prevBinS <- (Ib + R) / (S + Ib + R)#
	prevBinT <- (Ic + Rc) / (It + Ic + Rc) #
	overall_prevB <- (sum(Ib) + sum(Ic) + sum(R) + sum(Rc)) / sum(N)#
	overall_prevT <- (sum(It) + sum(Ic) + sum(Rc)) / sum(N)#
	overall_prevBinS <- (sum(Ib) + sum(R)) / (sum(S) + sum(Ib) + sum(R))#
	overall_prevBinT <- (sum(Ic) + sum(Rc)) / (sum(It) + sum(Ic) + sum(Rc))#
	overallN = sum(N) #
	par(mfrow = c(1,2))#
	plot(y = prevB, x= seq(1, 20, 1), type = "b", col = "dark blue", ylim = c(0, 0.8),#
		ylab = "Prevalence", xlab = "Age", pch = 19, #
		main = paste("Overall prevalences, Br =", round(overall_prevB, 3), #
		" TB = ", round(overall_prevT, 3) ))#
	points(y = prevT, x = seq(1,20,1), type = "b", col = "dark red", pch = 19)#
	legend("bottomright", bty = "n", legend = c("Bruc", "TB"), #
		pch = c(19, 19), col = c("dark blue", "dark red"))#
	plot(y = prevBinS, x = seq(1,20,1), type = "b", col = "dark blue", pch = 19, #
		ylab = "Brucellosis prevalence", xlab = "Age", ylim = c(0, 0.8), #
		main = paste("Br|S =", round(overall_prevBinS, 3), #
		" Br|Co = ", round(overall_prevBinT, 3) )#
		)#
	text(x = 10, y = 0.55, labels = paste("Final N = ", round(overallN, 2)))#
	points(y = prevBinT, x = seq(1,20,1), type = "b", col = "dark red", pch = 19)#
}#
#
##############################################################
##############################################################
##############################################################
##############################################################
# 3) Getz / Generalized Beverton-Holt form of density dependence
##############################################################
##############################################################
# 3) Getz / Generalized Beverton-Holt form of density dependence#
##############################################################
##############################################################
#
# Figure out parameters that give reasonable age structure with Getz density dependence#
# Test plots, with no Disease, none takes off#
##############################################################
thetaL = seq(0.1, 0.9, by = 0.1)#
thetaH = seq(1.1, 1.9, by = 0.1)#
N = seq(1, 2000, 1)#
f_N = function(N, theta){#
	0.5 / (1 + ((N/1000)^theta))#
}#
plot(x = N, y = f_N(N, theta = 1), type = "l", ylab = "R(N)")#
abline(v = 1000, col = "dark red")#
for (i in 1:length(thetaL)){#
	lines(x = N, y = f_N(N, theta = thetaL[i]), type = "l", col = "light gray", lty = 3)#
	lines(x = N, y = f_N(N, theta = thetaH[i]), type = "l", col = "light gray", lty = 5)#
}#
# params and inits#
S0 = 800*relage; It0 = 0*relage; Ib0 = 0*relage; #
Ic0 = 0*relage; R0 = 0 * relage; Rc0 = 0 * relage#
x0 = c(S0, It0, Ib0, Ic0, R0, Rc0)#
times <- seq(0, 500, 1)
params.test_log = c(fixed.params, list(gamma=1/2, betaB = 0.01,#
	betaT = 0.0001, rhoT = 1.2, rhoB = 4, theta= 5, K = 433))#
params.test.recov_log = c(fixed.params.recov, list(gamma=1/2, #
	betaB = 0.0001, betaT = 0.001, rhoT = 1.2, rhoB = 4, theta = 5, K = 433))
sol <- as.data.frame(ode(x0, times, rhs_age_matrix, params.test_log))#
sol.recov<- as.data.frame(ode(x0, times, rhs_age_matrix, params.test.recov_log))#
#
par(mfrow = c(2,2))#
plot(x = sol$time, y = apply(sol[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, no Recovery")#
plot(x = sol.recov$time, y = apply(sol.recov[c(2:120)], 1, sum), #
	pch = 19, main = "Density Dependent, Recovery")#
plot_raw_numbers(sol)#
plot_agestructure(as.matrix(sol[101,c(2:121)]))#
stable_age <- unname(unlist( sol[500, c(2:21)]/sum(sol[500, c(2:21)]) ))
